[{"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 0, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 330, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 1, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 331, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 2, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 334, "label": -3, "slices": ["    if (header->bfType != 19778) {\n", "        fprintf(stderr, \"Error, not a BMP file!\\n\");\n"], "tokenized": "if (Var1->memberVar1 != 19778){\nfprintf(Var2,STRING); \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 3, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 340, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 4, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 341, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 5, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 342, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 6, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 343, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 7, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 345, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 8, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 346, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 9, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 348, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 10, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 349, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 11, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 351, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 12, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 352, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 13, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 353, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_file_header", "Source": false, "Sink": false, "idx": 14, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 354, "label": -3, "slices": ["static OPJ_BOOL bmp_read_file_header(FILE* IN, OPJ_BITMAPFILEHEADER* header)\n", "    header->bfType  = (OPJ_UINT16)getc(IN);\n", "    header->bfType |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->bfType != 19778) {\n", "    header->bfSize  = (OPJ_UINT32)getc(IN);\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->bfReserved1  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved1 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfReserved2  = (OPJ_UINT16)getc(IN);\n", "    header->bfReserved2 |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->bfOffBits  = (OPJ_UINT32)getc(IN);\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->bfOffBits |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3)((Var4) getc(Var1)<<8); \nif (Var2->memberVar1 != 19778){\nVar2->memberVar2=(Var4) getc(Var1); \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var4) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar4=(Var3) getc(Var1); \nVar2->memberVar4 FUNC2(Var3)((Var4) getc(Var1)<<8); \nVar2->memberVar5=(Var4) getc(Var1); \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<8; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<16; \nVar2->memberVar5 FUNC2(Var4) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 15, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 359, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 16, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 362, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 17, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 363, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 18, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 364, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 19, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 365, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 20, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 376, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 21, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 380, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 22, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 381, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 23, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 382, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 24, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 383, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 25, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 385, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 26, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 386, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 27, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 387, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 28, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 388, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 29, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 390, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 30, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 391, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 31, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 393, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 32, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 394, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 33, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 396, "label": -3, "slices": ["    switch (header->biSize) {\n", "    if (header->biBitCount == 0) {\n", "        fprintf(stderr, \"Error, invalid biBitCount %d\\n\", 0);\n"], "tokenized": "switch (Var1->memberVar1){\nif (Var1->memberVar2 == 0){\nfprintf(Var2,STRING,0); \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 34, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 401, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 35, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 402, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 36, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 403, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 37, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 404, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 38, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 406, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 39, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 407, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 40, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 408, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 41, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 409, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 42, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 411, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 43, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 412, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 44, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 413, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 45, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 414, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 46, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 416, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 47, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 417, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 48, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 418, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 49, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 419, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 50, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 421, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 51, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 422, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 52, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 423, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 53, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 424, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 54, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 426, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 55, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 427, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 56, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 428, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 57, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 429, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 58, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 433, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 59, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 434, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 60, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 435, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 61, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 436, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 62, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 439, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 63, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 443, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 64, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 444, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 65, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 445, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 66, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 446, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 67, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 449, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 68, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 453, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 69, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 454, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 70, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 455, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 71, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 456, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 72, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 459, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 73, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 463, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 74, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 464, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 75, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 465, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 76, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 466, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 77, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 470, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 78, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 471, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 79, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 472, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 80, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 473, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 81, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fread", "line": 475, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 82, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 477, "label": -3, "slices": ["    switch (header->biSize) {\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 56U) {\n", "        if (!header->biRedMask) {\n", "        if (!header->biGreenMask) {\n", "        if (!header->biBlueMask) {\n", "    if (header->biSize >= 108U) {\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "            fprintf(stderr, \"Error, can't  read BMP header\\n\");\n"], "tokenized": "switch (Var1->memberVar1){\nif (Var1->memberVar2 == 0){\nif (Var1->memberVar1 >=  Var2){\nif (!Var1->memberVar3){\nif (!Var1->memberVar4){\nif (!Var1->memberVar5){\nif (Var1->memberVar1 >=  Var3){\nif (fread(&(Var1->memberVar6),Var4,sizeof (Var1->memberVar6),\nVar5) != sizeof (Var1->memberVar6)){\nfprintf(Var6,STRING); \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 83, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 481, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 84, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 482, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 85, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 483, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 86, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 484, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 87, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 486, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 88, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 487, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 89, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 488, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 90, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 489, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 91, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 491, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 92, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 492, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 93, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 493, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 94, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 494, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 95, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 498, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 96, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 499, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 97, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 500, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 98, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 501, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 99, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 503, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 100, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 504, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 101, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 505, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 102, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 506, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 103, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 508, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 104, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 509, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 105, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 510, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 106, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 511, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 107, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 513, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 108, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 514, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 109, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 515, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_info_header", "Source": false, "Sink": false, "idx": 110, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 516, "label": -3, "slices": ["static OPJ_BOOL bmp_read_info_header(FILE* IN, OPJ_BITMAPINFOHEADER* header)\n", "    memset(header, 0, sizeof(*header));\n", "    header->biSize  = (OPJ_UINT32)getc(IN);\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biSize |= (OPJ_UINT32)getc(IN) << 24;\n", "    switch (header->biSize) {\n", "        fprintf(stderr, \"Error, unknown BMP header size %d\\n\", header->biSize);\n", "    header->biWidth  = (OPJ_UINT32)getc(IN);\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biWidth |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biHeight  = (OPJ_UINT32)getc(IN);\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 8;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 16;\n", "    header->biHeight |= (OPJ_UINT32)getc(IN) << 24;\n", "    header->biPlanes  = (OPJ_UINT16)getc(IN);\n", "    header->biPlanes |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    header->biBitCount  = (OPJ_UINT16)getc(IN);\n", "    header->biBitCount |= (OPJ_UINT16)((OPJ_UINT32)getc(IN) << 8);\n", "    if (header->biBitCount == 0) {\n", "    if (header->biSize >= 40U) {\n", "        header->biCompression  = (OPJ_UINT32)getc(IN);\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biCompression |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biSizeImage  = (OPJ_UINT32)getc(IN);\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biSizeImage |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biXpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biXpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biYpelsPerMeter  = (OPJ_UINT32)getc(IN);\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biYpelsPerMeter |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrUsed  = (OPJ_UINT32)getc(IN);\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrUsed |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biClrImportant  = (OPJ_UINT32)getc(IN);\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biClrImportant |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 56U) {\n", "        header->biRedMask  = (OPJ_UINT32)getc(IN);\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biRedMask) {\n", "            fprintf(stderr, \"Error, invalid red mask value %d\\n\", header->biRedMask);\n", "        header->biGreenMask  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biGreenMask) {\n", "            fprintf(stderr, \"Error, invalid green mask value %d\\n\", header->biGreenMask);\n", "        header->biBlueMask  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueMask |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (!header->biBlueMask) {\n", "            fprintf(stderr, \"Error, invalid blue mask value %d\\n\", header->biBlueMask);\n", "        header->biAlphaMask  = (OPJ_UINT32)getc(IN);\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biAlphaMask |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 108U) {\n", "        header->biColorSpaceType  = (OPJ_UINT32)getc(IN);\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biColorSpaceType |= (OPJ_UINT32)getc(IN) << 24;\n", "        if (fread(&(header->biColorSpaceEP), 1U, sizeof(header->biColorSpaceEP),\n                  IN) != sizeof(header->biColorSpaceEP)) {\n", "        header->biRedGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biRedGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biGreenGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biGreenGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biBlueGamma  = (OPJ_UINT32)getc(IN);\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biBlueGamma |= (OPJ_UINT32)getc(IN) << 24;\n", "    if (header->biSize >= 124U) {\n", "        header->biIntent  = (OPJ_UINT32)getc(IN);\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIntent |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileData  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileData |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biIccProfileSize  = (OPJ_UINT32)getc(IN);\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biIccProfileSize |= (OPJ_UINT32)getc(IN) << 24;\n", "        header->biReserved  = (OPJ_UINT32)getc(IN);\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 8;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 16;\n", "        header->biReserved |= (OPJ_UINT32)getc(IN) << 24;\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2)\nmemset(Var2,0,sizeof (*Var2)); \nVar2->memberVar1=(Var3) getc(Var1); \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar1 FUNC2(Var3) getc(Var1)<<24; \nswitch (Var2->memberVar1){\nfprintf(Var4,STRING,Var2->memberVar1); \nVar2->memberVar2=(Var3) getc(Var1); \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar2 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar3=(Var3) getc(Var1); \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar3 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar4=(Var5) getc(Var1); \nVar2->memberVar4 FUNC2(Var5)((Var3) getc(Var1)<<8); \nVar2->memberVar5=(Var5) getc(Var1); \nVar2->memberVar5 FUNC2(Var5)((Var3) getc(Var1)<<8); \nif (Var2->memberVar5 == 0){\nif (Var2->memberVar1 >=  Var6){\nVar2->memberVar6=(Var3) getc(Var1); \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar6 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar7=(Var3) getc(Var1); \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar7 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar8=(Var3) getc(Var1); \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar8 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar9=(Var3) getc(Var1); \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar9 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar10=(Var3) getc(Var1); \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar10 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar11=(Var3) getc(Var1); \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar11 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var7){\nVar2->memberVar12=(Var3) getc(Var1); \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar12 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar12){\nfprintf(Var4,STRING,Var2->memberVar12); \nVar2->memberVar13=(Var3) getc(Var1); \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar13 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar13){\nfprintf(Var4,STRING,Var2->memberVar13); \nVar2->memberVar14=(Var3) getc(Var1); \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar14 FUNC2(Var3) getc(Var1)<<24; \nif (!Var2->memberVar14){\nfprintf(Var4,STRING,Var2->memberVar14); \nVar2->memberVar15=(Var3) getc(Var1); \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar15 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var8){\nVar2->memberVar16=(Var3) getc(Var1); \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar16 FUNC2(Var3) getc(Var1)<<24; \nif (fread(&(Var2->memberVar17),Var9,sizeof (Var2->memberVar17),\nVar1) != sizeof (Var2->memberVar17)){\nVar2->memberVar18=(Var3) getc(Var1); \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar18 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar19=(Var3) getc(Var1); \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar19 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar20=(Var3) getc(Var1); \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar20 FUNC2(Var3) getc(Var1)<<24; \nif (Var2->memberVar1 >=  Var10){\nVar2->memberVar21=(Var3) getc(Var1); \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar21 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar22=(Var3) getc(Var1); \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar22 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar23=(Var3) getc(Var1); \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar23 FUNC2(Var3) getc(Var1)<<24; \nVar2->memberVar24=(Var3) getc(Var1); \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<8; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<16; \nVar2->memberVar24 FUNC2(Var3) getc(Var1)<<24; \n"}, {"FileName": "before.c", "Caller": "bmp_read_raw_data", "Source": false, "Sink": false, "idx": 111, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fread", "line": 526, "label": -3, "slices": ["static OPJ_BOOL bmp_read_raw_data(FILE* IN, OPJ_UINT8* pData, OPJ_UINT32 stride,\n                                  OPJ_UINT32 width, OPJ_UINT32 height)\n", "                                  OPJ_UINT32 width, OPJ_UINT32 height)\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,STRUCT4  Var3,\nSTRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var4,STRUCT4  Var5)\n"}, {"FileName": "before.c", "Caller": "bmp_read_raw_data", "Source": false, "Sink": false, "idx": 112, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 527, "label": -3, "slices": ["    if (fread(pData, sizeof(OPJ_UINT8), stride * height, IN) != (stride * height)) {\n", "        fprintf(stderr,\n                \"\\nError: fread return a number of element different from the expected.\\n\");\n"], "tokenized": "if (fread(Var1,sizeof (Var2),STRUCT1 *Var3,Var4) != (STRUCT1 *Var3)){\nfprintf(Var5,\nSTRING); \n"}, {"FileName": "before.c", "Caller": "bmp_read_rle8_data", "Source": false, "Sink": false, "idx": 113, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 546, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle8_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) {\n", "            int j, c1_int;\n", "            c1_int = getc(IN);\n", "            if (c1_int == EOF) {\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                y += (OPJ_UINT32)c;\n", "else\n", "                int j;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    int c1_int;\n", "                    c1_int = getc(IN);\n", "                    if (c1_int == EOF) {\n", "                if ((OPJ_UINT32)c & 1U) { /* skip padding byte */\n", "                    c = getc(IN);\n", "                    if (c == EOF) {\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){\nint  Var12,Var13; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT5 */\nelse \n}else if (Var10 == 1){/*STRUCT6 */\nelse \n}else if (Var10 == 2){/*Var14  STRUCT7 STRUCT8 */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar7 FUNC2(STRUCT4) Var10; \nelse \nint  Var12; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\nint  Var13; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nif ((STRUCT4) Var10&Var17){/*Var18  STRUCT9 byte */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\n"}, {"FileName": "before.c", "Caller": "bmp_read_rle8_data", "Source": false, "Sink": false, "idx": 114, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 555, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle8_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) {\n", "            int j, c1_int;\n", "            OPJ_UINT8 c1;\n", "            c1_int = getc(IN);\n", "            if (c1_int == EOF) {\n", "            c1 = (OPJ_UINT8)c1_int;\n", "            for (j = 0; (j < c) && (x < width) &&\n                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                *pix = c1;\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "else\n", "                int j;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    int c1_int;\n", "                    OPJ_UINT8 c1;\n", "                    c1_int = getc(IN);\n", "                    if (c1_int == EOF) {\n", "                    c1 = (OPJ_UINT8)c1_int;\n", "                if ((OPJ_UINT32)c & 1U) { /* skip padding byte */\n", "                    c = getc(IN);\n", "                    if (c == EOF) {\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){\nint  Var12,Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nVar14=(STRUCT3) Var13; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\n*Var8=Var14; \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT5 */\nelse \n}else if (Var10 == 1){/*STRUCT6 */\nelse \n}else if (Var10 == 2){/*Var17  STRUCT7 STRUCT8 */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nelse \nint  Var12; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\nint  Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nVar14=(STRUCT3) Var13; \nif ((STRUCT4) Var10&Var18){/*Var19  STRUCT9 byte */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\n"}, {"FileName": "before.c", "Caller": "bmp_read_rle8_data", "Source": false, "Sink": false, "idx": 115, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 566, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle8_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) {\n", "            int j, c1_int;\n", "            c1_int = getc(IN);\n", "            if (c1_int == EOF) {\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                y += (OPJ_UINT32)c;\n", "else\n", "                int j;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    int c1_int;\n", "                    c1_int = getc(IN);\n", "                    if (c1_int == EOF) {\n", "                if ((OPJ_UINT32)c & 1U) { /* skip padding byte */\n", "                    c = getc(IN);\n", "                    if (c == EOF) {\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){\nint  Var12,Var13; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT5 */\nelse \n}else if (Var10 == 1){/*STRUCT6 */\nelse \n}else if (Var10 == 2){/*Var14  STRUCT7 STRUCT8 */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar7 FUNC2(STRUCT4) Var10; \nelse \nint  Var12; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\nint  Var13; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nif ((STRUCT4) Var10&Var17){/*Var18  STRUCT9 byte */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\n"}, {"FileName": "before.c", "Caller": "bmp_read_rle8_data", "Source": false, "Sink": false, "idx": 116, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 578, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle8_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) {\n", "            int j, c1_int;\n", "            OPJ_UINT8 c1;\n", "            c1_int = getc(IN);\n", "            if (c1_int == EOF) {\n", "            for (j = 0; (j < c) && (x < width) &&\n                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                *pix = c1;\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                y += (OPJ_UINT32)c;\n", "                pix = pData + y * stride + x;\n", "else\n", "                int j;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    int c1_int;\n", "                    OPJ_UINT8 c1;\n", "                    c1_int = getc(IN);\n", "                    if (c1_int == EOF) {\n", "                    *pix = c1;\n", "                if ((OPJ_UINT32)c & 1U) { /* skip padding byte */\n", "                    c = getc(IN);\n", "                    if (c == EOF) {\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){\nint  Var12,Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\n*Var8=Var14; \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT5 */\nelse \n}else if (Var10 == 1){/*STRUCT6 */\nelse \n}else if (Var10 == 2){/*Var17  STRUCT7 STRUCT8 */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar7 FUNC2(STRUCT4) Var10; \nVar8=Var2+Var7 *Var3+Var6; \nelse \nint  Var12; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\nint  Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\n*Var8=Var14; \nif ((STRUCT4) Var10&Var18){/*Var19  STRUCT9 byte */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\n"}, {"FileName": "before.c", "Caller": "bmp_read_rle8_data", "Source": false, "Sink": false, "idx": 117, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 583, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle8_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) {\n", "            int j, c1_int;\n", "            OPJ_UINT8 c1;\n", "            c1_int = getc(IN);\n", "            if (c1_int == EOF) {\n", "            for (j = 0; (j < c) && (x < width) &&\n                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                *pix = c1;\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                y += (OPJ_UINT32)c;\n", "                pix = pData + y * stride + x;\n", "else\n", "                int j;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    int c1_int;\n", "                    OPJ_UINT8 c1;\n", "                    c1_int = getc(IN);\n", "                    if (c1_int == EOF) {\n", "                    *pix = c1;\n", "                if ((OPJ_UINT32)c & 1U) { /* skip padding byte */\n", "                    c = getc(IN);\n", "                    if (c == EOF) {\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){\nint  Var12,Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\n*Var8=Var14; \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT5 */\nelse \n}else if (Var10 == 1){/*STRUCT6 */\nelse \n}else if (Var10 == 2){/*Var17  STRUCT7 STRUCT8 */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar7 FUNC2(STRUCT4) Var10; \nVar8=Var2+Var7 *Var3+Var6; \nelse \nint  Var12; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\nint  Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\n*Var8=Var14; \nif ((STRUCT4) Var10&Var18){/*Var19  STRUCT9 byte */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\n"}, {"FileName": "before.c", "Caller": "bmp_read_rle8_data", "Source": false, "Sink": false, "idx": 118, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 595, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle8_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) {\n", "            int j, c1_int;\n", "            OPJ_UINT8 c1;\n", "            c1_int = getc(IN);\n", "            if (c1_int == EOF) {\n", "            c1 = (OPJ_UINT8)c1_int;\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "else\n", "                int j;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    int c1_int;\n", "                    OPJ_UINT8 c1;\n", "                    c1_int = getc(IN);\n", "                    if (c1_int == EOF) {\n", "                    c1 = (OPJ_UINT8)c1_int;\n", "                    *pix = c1;\n", "                if ((OPJ_UINT32)c & 1U) { /* skip padding byte */\n", "                    c = getc(IN);\n", "                    if (c == EOF) {\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){\nint  Var12,Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nVar14=(STRUCT3) Var13; \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT5 */\nelse \n}else if (Var10 == 1){/*STRUCT6 */\nelse \n}else if (Var10 == 2){/*Var15  STRUCT7 STRUCT8 */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nelse \nint  Var12; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var16) Var8<(Var16) Var9); Var12  Var17,Var6  Var17,Var8  Var17){\nint  Var13; \nSTRUCT3  Var14; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nVar14=(STRUCT3) Var13; \n*Var8=Var14; \nif ((STRUCT4) Var10&Var18){/*Var19  STRUCT9 byte */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\n"}, {"FileName": "before.c", "Caller": "bmp_read_rle8_data", "Source": false, "Sink": false, "idx": 119, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 603, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle8_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) {\n", "            int j, c1_int;\n", "            c1_int = getc(IN);\n", "            if (c1_int == EOF) {\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                if (c == EOF) {\n", "                y += (OPJ_UINT32)c;\n", "else\n", "                int j;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    int c1_int;\n", "                    c1_int = getc(IN);\n", "                    if (c1_int == EOF) {\n", "                if ((OPJ_UINT32)c & 1U) { /* skip padding byte */\n", "                    c = getc(IN);\n", "                    if (c == EOF) {\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){\nint  Var12,Var13; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT5 */\nelse \n}else if (Var10 == 1){/*STRUCT6 */\nelse \n}else if (Var10 == 2){/*Var14  STRUCT7 STRUCT8 */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nVar7 FUNC2(STRUCT4) Var10; \nelse \nint  Var12; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var15) Var8<(Var15) Var9); Var12  Var16,Var6  Var16,Var8  Var16){\nint  Var13; \nVar13=getc(Var1); \nif (Var13 ==  Var11){\nif ((STRUCT4) Var10&Var17){/*Var18  STRUCT9 byte */\nVar10=getc(Var1); \nif (Var10 ==  Var11){\n"}, {"FileName": "before.c", "Caller": "bmp_read_rle4_data", "Source": false, "Sink": false, "idx": 120, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 625, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle4_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) { /* encoded mode */\n", "            int j;\n", "            OPJ_UINT8 c1 = (OPJ_UINT8)getc(IN);\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                y += (OPJ_UINT32)c;\n", "else\n", "                int j;\n", "                OPJ_UINT8 c1 = 0U;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    if ((j & 1) == 0) {\n", "                        c1 = (OPJ_UINT8)getc(IN);\n", "                if (((c & 3) == 1) || ((c & 3) == 2)) { /* skip padding byte */\n", "                    getc(IN);\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){/*STRUCT5 STRUCT6 */\nint  Var12; \nSTRUCT3  Var13=(STRUCT3) getc(Var1); \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT7 */\nelse \n}else if (Var10 == 1){/*STRUCT8 */\nelse \n}else if (Var10 == 2){/*Var14  STRUCT9 STRUCT10 */\nVar10=getc(Var1); \nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nVar7 FUNC2(STRUCT4) Var10; \nelse \nint  Var12; \nSTRUCT3  Var13=Var15; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var16) Var8<(Var16) Var9); Var12  Var17,Var6  Var17,Var8  Var17){\nif ((Var12&1) == 0){\nVar13=(STRUCT3) getc(Var1); \nif (((Var10&3) == 1)||((Var10&3) == 2)){/*Var18  STRUCT11 byte */\ngetc(Var1); \n"}, {"FileName": "before.c", "Caller": "bmp_read_rle4_data", "Source": false, "Sink": false, "idx": 121, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 632, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle4_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) { /* encoded mode */\n", "            int j;\n", "            OPJ_UINT8 c1 = (OPJ_UINT8)getc(IN);\n", "            for (j = 0; (j < c) && (x < width) &&\n                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                c = getc(IN);\n", "else\n", "                int j;\n", "                OPJ_UINT8 c1 = 0U;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    if ((j & 1) == 0) {\n", "                        c1 = (OPJ_UINT8)getc(IN);\n", "                    *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "                if (((c & 3) == 1) || ((c & 3) == 2)) { /* skip padding byte */\n", "                    getc(IN);\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){/*STRUCT5 STRUCT6 */\nint  Var12; \nSTRUCT3  Var13=(STRUCT3) getc(Var1); \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT7 */\nelse \n}else if (Var10 == 1){/*STRUCT8 */\nelse \n}else if (Var10 == 2){/*Var17  STRUCT9 STRUCT10 */\nVar10=getc(Var1); \nVar10=getc(Var1); \nelse \nint  Var12; \nSTRUCT3  Var13=Var18; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\nif ((Var12&1) == 0){\nVar13=(STRUCT3) getc(Var1); \n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nif (((Var10&3) == 1)||((Var10&3) == 2)){/*Var19  STRUCT11 byte */\ngetc(Var1); \n"}, {"FileName": "before.c", "Caller": "bmp_read_rle4_data", "Source": false, "Sink": false, "idx": 122, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 639, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle4_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) { /* encoded mode */\n", "            int j;\n", "            OPJ_UINT8 c1 = (OPJ_UINT8)getc(IN);\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                y += (OPJ_UINT32)c;\n", "else\n", "                int j;\n", "                OPJ_UINT8 c1 = 0U;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    if ((j & 1) == 0) {\n", "                        c1 = (OPJ_UINT8)getc(IN);\n", "                if (((c & 3) == 1) || ((c & 3) == 2)) { /* skip padding byte */\n", "                    getc(IN);\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){/*STRUCT5 STRUCT6 */\nint  Var12; \nSTRUCT3  Var13=(STRUCT3) getc(Var1); \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT7 */\nelse \n}else if (Var10 == 1){/*STRUCT8 */\nelse \n}else if (Var10 == 2){/*Var14  STRUCT9 STRUCT10 */\nVar10=getc(Var1); \nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nVar7 FUNC2(STRUCT4) Var10; \nelse \nint  Var12; \nSTRUCT3  Var13=Var15; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var16) Var8<(Var16) Var9); Var12  Var17,Var6  Var17,Var8  Var17){\nif ((Var12&1) == 0){\nVar13=(STRUCT3) getc(Var1); \nif (((Var10&3) == 1)||((Var10&3) == 2)){/*Var18  STRUCT11 byte */\ngetc(Var1); \n"}, {"FileName": "before.c", "Caller": "bmp_read_rle4_data", "Source": false, "Sink": false, "idx": 123, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 651, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle4_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) { /* encoded mode */\n", "            int j;\n", "            OPJ_UINT8 c1 = (OPJ_UINT8)getc(IN);\n", "            for (j = 0; (j < c) && (x < width) &&\n                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                y += (OPJ_UINT32)c;\n", "                pix = pData + y * stride + x;\n", "else\n", "                int j;\n", "                OPJ_UINT8 c1 = 0U;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    if ((j & 1) == 0) {\n", "                        c1 = (OPJ_UINT8)getc(IN);\n", "                    *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "                if (((c & 3) == 1) || ((c & 3) == 2)) { /* skip padding byte */\n", "                    getc(IN);\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){/*STRUCT5 STRUCT6 */\nint  Var12; \nSTRUCT3  Var13=(STRUCT3) getc(Var1); \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT7 */\nelse \n}else if (Var10 == 1){/*STRUCT8 */\nelse \n}else if (Var10 == 2){/*Var17  STRUCT9 STRUCT10 */\nVar10=getc(Var1); \nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nVar7 FUNC2(STRUCT4) Var10; \nVar8=Var2+Var7 *Var3+Var6; \nelse \nint  Var12; \nSTRUCT3  Var13=Var18; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\nif ((Var12&1) == 0){\nVar13=(STRUCT3) getc(Var1); \n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nif (((Var10&3) == 1)||((Var10&3) == 2)){/*Var19  STRUCT11 byte */\ngetc(Var1); \n"}, {"FileName": "before.c", "Caller": "bmp_read_rle4_data", "Source": false, "Sink": false, "idx": 124, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 653, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle4_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) { /* encoded mode */\n", "            int j;\n", "            OPJ_UINT8 c1 = (OPJ_UINT8)getc(IN);\n", "            for (j = 0; (j < c) && (x < width) &&\n                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "                y++;\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                x += (OPJ_UINT32)c;\n", "                c = getc(IN);\n", "                y += (OPJ_UINT32)c;\n", "                pix = pData + y * stride + x;\n", "else\n", "                int j;\n", "                OPJ_UINT8 c1 = 0U;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    if ((j & 1) == 0) {\n", "                        c1 = (OPJ_UINT8)getc(IN);\n", "                    *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "                if (((c & 3) == 1) || ((c & 3) == 2)) { /* skip padding byte */\n", "                    getc(IN);\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){/*STRUCT5 STRUCT6 */\nint  Var12; \nSTRUCT3  Var13=(STRUCT3) getc(Var1); \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT7 */\nVar7  Var15; \nelse \n}else if (Var10 == 1){/*STRUCT8 */\nelse \n}else if (Var10 == 2){/*Var17  STRUCT9 STRUCT10 */\nVar10=getc(Var1); \nVar6 FUNC2(STRUCT4) Var10; \nVar10=getc(Var1); \nVar7 FUNC2(STRUCT4) Var10; \nVar8=Var2+Var7 *Var3+Var6; \nelse \nint  Var12; \nSTRUCT3  Var13=Var18; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\nif ((Var12&1) == 0){\nVar13=(STRUCT3) getc(Var1); \n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nif (((Var10&3) == 1)||((Var10&3) == 2)){/*Var19  STRUCT11 byte */\ngetc(Var1); \n"}, {"FileName": "before.c", "Caller": "bmp_read_rle4_data", "Source": false, "Sink": false, "idx": 125, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 663, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle4_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) { /* encoded mode */\n", "            int j;\n", "            OPJ_UINT8 c1 = (OPJ_UINT8)getc(IN);\n", "            for (j = 0; (j < c) && (x < width) &&\n                    ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                c = getc(IN);\n", "else\n", "                int j;\n", "                OPJ_UINT8 c1 = 0U;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    if ((j & 1) == 0) {\n", "                        c1 = (OPJ_UINT8)getc(IN);\n", "                    *pix = (OPJ_UINT8)((j & 1) ? (c1 & 0x0fU) : ((c1 >> 4) & 0x0fU));\n", "                if (((c & 3) == 1) || ((c & 3) == 2)) { /* skip padding byte */\n", "                    getc(IN);\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){/*STRUCT5 STRUCT6 */\nint  Var12; \nSTRUCT3  Var13=(STRUCT3) getc(Var1); \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT7 */\nelse \n}else if (Var10 == 1){/*STRUCT8 */\nelse \n}else if (Var10 == 2){/*Var17  STRUCT9 STRUCT10 */\nVar10=getc(Var1); \nVar10=getc(Var1); \nelse \nint  Var12; \nSTRUCT3  Var13=Var18; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var14) Var8<(Var14) Var9); Var12  Var15,Var6  Var15,Var8  Var15){\nif ((Var12&1) == 0){\nVar13=(STRUCT3) getc(Var1); \n*Var8=(STRUCT3)((Var12&1)(Var13&Var16)((Var13>>4)&Var16)); \nif (((Var10&3) == 1)||((Var10&3) == 2)){/*Var19  STRUCT11 byte */\ngetc(Var1); \n"}, {"FileName": "before.c", "Caller": "bmp_read_rle4_data", "Source": false, "Sink": false, "idx": 126, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 668, "label": -3, "slices": ["static OPJ_BOOL bmp_read_rle4_data(FILE* IN, OPJ_UINT8* pData,\n                                   OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)\n", "    OPJ_UINT32 x, y;\n", "    OPJ_UINT8 *pix;\n", "    const OPJ_UINT8 *beyond;\n", "    while (y < height) {\n", "        int c = getc(IN);\n", "        if (c == EOF) {\n", "        if (c) { /* encoded mode */\n", "            int j;\n", "            OPJ_UINT8 c1 = (OPJ_UINT8)getc(IN);\n", "else\n", "            c = getc(IN);\n", "            if (c == EOF) {\n", "            if (c == 0x00) { /* EOL */\n", "else\n", "            } else if (c == 0x01) { /* EOP */\n", "else\n", "            } else if (c == 0x02) { /* MOVE by dxdy */\n", "                c = getc(IN);\n", "                c = getc(IN);\n", "else\n", "                int j;\n", "                OPJ_UINT8 c1 = 0U;\n", "                for (j = 0; (j < c) && (x < width) &&\n                        ((OPJ_SIZE_T)pix < (OPJ_SIZE_T)beyond); j++, x++, pix++) {\n", "                    if ((j & 1) == 0) {\n", "                        c1 = (OPJ_UINT8)getc(IN);\n", "                if (((c & 3) == 1) || ((c & 3) == 2)) { /* skip padding byte */\n", "                    getc(IN);\n"], "tokenized": "static  STRUCT1 FUNC1(STRUCT2 *Var1,STRUCT3 *Var2,\nSTRUCT4  Var3,STRUCT4  Var4,STRUCT4  Var5)\nSTRUCT4  Var6,Var7; \nSTRUCT3 *Var8; \nconst STRUCT3 *Var9; \nwhile (Var7<Var5){\nint  Var10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10){/*STRUCT5 STRUCT6 */\nint  Var12; \nSTRUCT3  Var13=(STRUCT3) getc(Var1); \nelse \nVar10=getc(Var1); \nif (Var10 ==  Var11){\nif (Var10 == 0){/*STRUCT7 */\nelse \n}else if (Var10 == 1){/*STRUCT8 */\nelse \n}else if (Var10 == 2){/*Var14  STRUCT9 STRUCT10 */\nVar10=getc(Var1); \nVar10=getc(Var1); \nelse \nint  Var12; \nSTRUCT3  Var13=Var15; \nfor (Var12=0; (Var12<Var10)&&(Var6<Var4)&&\n((Var16) Var8<(Var16) Var9); Var12  Var17,Var6  Var17,Var8  Var17){\nif ((Var12&1) == 0){\nVar13=(STRUCT3) getc(Var1); \nif (((Var10&3) == 1)||((Var10&3) == 2)){/*Var18  STRUCT11 byte */\ngetc(Var1); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 127, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fopen", "line": 694, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    opj_image_cmptparm_t cmptparm[4];   /* maximum of 4 components */\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "        fprintf(stderr, \"Failed to open %s for reading !!\\n\", filename);\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            OPJ_UINT8 has_color = 0U;\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "                has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    for (i = 0; i < 4U; i++) {\n", "        cmptparm[i].prec = 8;\n", "        cmptparm[i].bpp  = 8;\n", "        cmptparm[i].sgnd = 0;\n", "        cmptparm[i].dx   = (OPJ_UINT32)parameters->subsampling_dx;\n", "        cmptparm[i].dy   = (OPJ_UINT32)parameters->subsampling_dy;\n", "        cmptparm[i].w    = Info_h.biWidth;\n", "        cmptparm[i].h    = Info_h.biHeight;\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[4]; /*Var4  Var5 4STRUCT4 */\nSTRUCT5  Var6[256],Var7[256],Var8[256]; \nSTRUCT1 *Var9=NULL ; \nSTRUCT6 *Var10; \nSTRUCT7  Var11; \nSTRUCT8  Var12; \nSTRUCT9  Var13,Var14,Var15=Var16; \nSTRUCT10  Var17=Var18; \nSTRUCT5 *Var19=NULL ; \nSTRUCT9  Var20; \nVar10=fopen(Var1,STRING); \nif (!Var10){\nfprintf(Var21,STRING,Var1); \nif (!FUNC2(Var10,&Var11)){\nfclose(Var10); \nif (!FUNC3(Var10,&Var12)){\nfclose(Var10); \nif (Var12.memberVar1 <=  Var22){\nif (Var14>Var23){\nSTRUCT5  Var24=Var23; \nfor (Var13=Var23; Var13<Var14; Var13  Var25){\nVar8[Var13]=(STRUCT5) getc(Var10); \nVar7[Var13]=(STRUCT5) getc(Var10); \nVar6[Var13]=(STRUCT5) getc(Var10); \n(void ) getc(Var10); /*STRUCT11 */\nVar24 FUNC4(Var8[Var13]Var7[Var13])|(Var7[Var13]Var6[Var13]); \nif (Var12.memberVar2 == 0||Var12.memberVar3 == 0){\nfclose(Var10); \nif (Var12.memberVar1>(((STRUCT9)-1)-31)/Var12.memberVar2){\nfclose(Var10); \nif (Var12.memberVar1 == 4&&\nVar12.memberVar4 == 2){/*Var26 4gets Var27  Var28 8 Var29  Var30 for  Var31...*/\nif (8>(((STRUCT9)-1)-31)/Var12.memberVar2){\nfclose(Var10); \nif (Var20>((STRUCT9)-1)/sizeof (STRUCT5)/Var12.memberVar3){\nfclose(Var10); \nif (Var19 == NULL ){\nfclose(Var10); \nFUNC5(Var10,0,Var32); \nFUNC5(Var10,(long ) Var11.memberVar1,Var32); \nswitch (Var12.memberVar4){\nVar17=FUNC6(Var10,Var19,Var20,Var12.memberVar2,\nVar12.memberVar3); \nVar17=FUNC7(Var10,Var19,Var20,Var12.memberVar2,\nVar12.memberVar3); \nVar17=FUNC8(Var10,Var19,Var20,Var12.memberVar2,\nVar12.memberVar3); \nif (!Var17){\nfclose(Var10); \nfor (Var13=0; Var13<Var33; Var13  Var25){\nVar3[Var13].memberVar1=8; \nVar3[Var13].memberVar2=8; \nVar3[Var13].memberVar3=0; \nVar3[Var13].memberVar4=(STRUCT9) Var2->memberVar1; \nVar3[Var13].memberVar5=(STRUCT9) Var2->memberVar2; \nVar3[Var13].memberVar6=Var12.memberVar2; \nVar3[Var13].memberVar7=Var12.memberVar3; \nif (!Var9){\nfclose(Var10); \nfclose(Var10); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 128, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 696, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    FILE *IN;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "        fprintf(stderr, \"Failed to open %s for reading !!\\n\", filename);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3 *Var3; \nVar3=fopen(Var1,STRING); \nif (!Var3){\nfprintf(Var4,STRING,Var1); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 129, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 701, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 130, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 705, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 131, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 711, "label": -3, "slices": ["    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    OPJ_UINT8 const* pLUT[3];\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    pLUT[0] = lut_R;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biBitCount <= 8U) {\n", "        memset(&lut_R[0], 0, sizeof(lut_R));\n", "        if (palette_len > 0U) {\n", "            OPJ_UINT8 has_color = 0U;\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);\n"], "tokenized": "STRUCT1  Var1[256],Var2[256],Var3[256]; \nSTRUCT1 const *Var4[3]; \nSTRUCT2 *Var5; \nSTRUCT3  Var6; \nSTRUCT4  Var7,Var8,Var9=Var10; \nVar4[0]=Var1; \nif (!Var5){\nif (!FUNC1(Var5,&Var11)){\nif (!FUNC2(Var5,&Var6)){\nif (Var6.memberVar1 <=  Var12){\nmemset(&Var1[0],0,sizeof (Var1)); \nif (Var8>Var13){\nSTRUCT1  Var14=Var13; \nfor (Var7=Var13; Var7<Var8; Var7  Var15){\nVar1[Var7]=(STRUCT1) getc(Var5); \nVar14 FUNC3(Var3[Var7]Var2[Var7])|(Var2[Var7]Var1[Var7]); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 132, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 712, "label": -3, "slices": ["    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    OPJ_UINT8 const* pLUT[3];\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    pLUT[1] = lut_G;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biBitCount <= 8U) {\n", "        memset(&lut_G[0], 0, sizeof(lut_G));\n", "        if (palette_len > 0U) {\n", "            OPJ_UINT8 has_color = 0U;\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);\n"], "tokenized": "STRUCT1  Var1[256],Var2[256],Var3[256]; \nSTRUCT1 const *Var4[3]; \nSTRUCT2 *Var5; \nSTRUCT3  Var6; \nSTRUCT4  Var7,Var8,Var9=Var10; \nVar4[1]=Var2; \nif (!Var5){\nif (!FUNC1(Var5,&Var11)){\nif (!FUNC2(Var5,&Var6)){\nif (Var6.memberVar1 <=  Var12){\nmemset(&Var2[0],0,sizeof (Var2)); \nif (Var8>Var13){\nSTRUCT1  Var14=Var13; \nfor (Var7=Var13; Var7<Var8; Var7  Var15){\nVar2[Var7]=(STRUCT1) getc(Var5); \nVar14 FUNC3(Var3[Var7]Var2[Var7])|(Var2[Var7]Var1[Var7]); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 133, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 713, "label": -3, "slices": ["    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    OPJ_UINT8 const* pLUT[3];\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    pLUT[2] = lut_B;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biBitCount <= 8U) {\n", "        memset(&lut_B[0], 0, sizeof(lut_B));\n", "        if (palette_len > 0U) {\n", "            OPJ_UINT8 has_color = 0U;\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);\n"], "tokenized": "STRUCT1  Var1[256],Var2[256],Var3[256]; \nSTRUCT1 const *Var4[3]; \nSTRUCT2 *Var5; \nSTRUCT3  Var6; \nSTRUCT4  Var7,Var8,Var9=Var10; \nVar4[2]=Var3; \nif (!Var5){\nif (!FUNC1(Var5,&Var11)){\nif (!FUNC2(Var5,&Var6)){\nif (Var6.memberVar1 <=  Var12){\nmemset(&Var3[0],0,sizeof (Var3)); \nif (Var8>Var13){\nSTRUCT1  Var14=Var13; \nfor (Var7=Var13; Var7<Var8; Var7  Var15){\nVar3[Var7]=(STRUCT1) getc(Var5); \nVar14 FUNC3(Var3[Var7]Var2[Var7])|(Var2[Var7]Var1[Var7]); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 134, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 725, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    OPJ_UINT8 const* pLUT[3];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    pLUT[2] = lut_B;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        memset(&lut_B[0], 0, sizeof(lut_B));\n", "        if (palette_len > 0U) {\n", "            OPJ_UINT8 has_color = 0U;\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "                has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT3 const *Var6[3]; \nSTRUCT1 *Var7=NULL ; \nSTRUCT4 *Var8; \nSTRUCT5  Var9; \nSTRUCT6  Var10; \nSTRUCT7  Var11,Var12,Var13=Var14; \nSTRUCT8  Var15=Var16; \nSTRUCT3 *Var17=NULL ; \nSTRUCT7  Var18; \nVar6[2]=Var5; \nVar8=fopen(Var1,STRING); \nif (!Var8){\nif (!FUNC2(Var8,&Var9)){\nfclose(Var8); \nif (!FUNC3(Var8,&Var10)){\nfclose(Var8); \nif (Var10.memberVar1 <=  Var19){\nmemset(&Var5[0],0,sizeof (Var5)); \nif (Var12>Var20){\nSTRUCT3  Var21=Var20; \nfor (Var11=Var20; Var11<Var12; Var11  Var22){\nVar5[Var11]=(STRUCT3) getc(Var8); \nVar4[Var11]=(STRUCT3) getc(Var8); \nVar3[Var11]=(STRUCT3) getc(Var8); \n(void ) getc(Var8); /*STRUCT9 */\nVar21 FUNC4(Var5[Var11]Var4[Var11])|(Var4[Var11]Var3[Var11]); \nif (Var10.memberVar2 == 0||Var10.memberVar3 == 0){\nfclose(Var8); \nif (Var10.memberVar1>(((STRUCT7)-1)-31)/Var10.memberVar2){\nfclose(Var8); \nif (Var10.memberVar1 == 4&&\nVar10.memberVar4 == 2){/*Var23 4gets Var24  Var25 8 Var26  Var27 for  Var28...*/\nif (8>(((STRUCT7)-1)-31)/Var10.memberVar2){\nfclose(Var8); \nif (Var18>((STRUCT7)-1)/sizeof (STRUCT3)/Var10.memberVar3){\nfclose(Var8); \nif (Var17 == NULL ){\nfclose(Var8); \nFUNC5(Var8,0,Var29); \nFUNC5(Var8,(long ) Var9.memberVar1,Var29); \nswitch (Var10.memberVar4){\nVar15=FUNC6(Var8,Var17,Var18,Var10.memberVar2,\nVar10.memberVar3); \nVar15=FUNC7(Var8,Var17,Var18,Var10.memberVar2,\nVar10.memberVar3); \nVar15=FUNC8(Var8,Var17,Var18,Var10.memberVar2,\nVar10.memberVar3); \nif (!Var15){\nfclose(Var8); \nif (!Var7){\nfclose(Var8); \nfclose(Var8); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 135, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 726, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    OPJ_UINT8 const* pLUT[3];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    pLUT[1] = lut_G;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        memset(&lut_G[0], 0, sizeof(lut_G));\n", "        if (palette_len > 0U) {\n", "            OPJ_UINT8 has_color = 0U;\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "                has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT3 const *Var6[3]; \nSTRUCT1 *Var7=NULL ; \nSTRUCT4 *Var8; \nSTRUCT5  Var9; \nSTRUCT6  Var10; \nSTRUCT7  Var11,Var12,Var13=Var14; \nSTRUCT8  Var15=Var16; \nSTRUCT3 *Var17=NULL ; \nSTRUCT7  Var18; \nVar6[1]=Var4; \nVar8=fopen(Var1,STRING); \nif (!Var8){\nif (!FUNC2(Var8,&Var9)){\nfclose(Var8); \nif (!FUNC3(Var8,&Var10)){\nfclose(Var8); \nif (Var10.memberVar1 <=  Var19){\nmemset(&Var4[0],0,sizeof (Var4)); \nif (Var12>Var20){\nSTRUCT3  Var21=Var20; \nfor (Var11=Var20; Var11<Var12; Var11  Var22){\nVar5[Var11]=(STRUCT3) getc(Var8); \nVar4[Var11]=(STRUCT3) getc(Var8); \nVar3[Var11]=(STRUCT3) getc(Var8); \n(void ) getc(Var8); /*STRUCT9 */\nVar21 FUNC4(Var5[Var11]Var4[Var11])|(Var4[Var11]Var3[Var11]); \nif (Var10.memberVar2 == 0||Var10.memberVar3 == 0){\nfclose(Var8); \nif (Var10.memberVar1>(((STRUCT7)-1)-31)/Var10.memberVar2){\nfclose(Var8); \nif (Var10.memberVar1 == 4&&\nVar10.memberVar4 == 2){/*Var23 4gets Var24  Var25 8 Var26  Var27 for  Var28...*/\nif (8>(((STRUCT7)-1)-31)/Var10.memberVar2){\nfclose(Var8); \nif (Var18>((STRUCT7)-1)/sizeof (STRUCT3)/Var10.memberVar3){\nfclose(Var8); \nif (Var17 == NULL ){\nfclose(Var8); \nFUNC5(Var8,0,Var29); \nFUNC5(Var8,(long ) Var9.memberVar1,Var29); \nswitch (Var10.memberVar4){\nVar15=FUNC6(Var8,Var17,Var18,Var10.memberVar2,\nVar10.memberVar3); \nVar15=FUNC7(Var8,Var17,Var18,Var10.memberVar2,\nVar10.memberVar3); \nVar15=FUNC8(Var8,Var17,Var18,Var10.memberVar2,\nVar10.memberVar3); \nif (!Var15){\nfclose(Var8); \nif (!Var7){\nfclose(Var8); \nfclose(Var8); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 136, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 727, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    opj_image_cmptparm_t cmptparm[4];   /* maximum of 4 components */\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    OPJ_UINT8 const* pLUT[3];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    pLUT[0] = lut_R;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        memset(&lut_R[0], 0, sizeof(lut_R));\n", "        if (palette_len > 0U) {\n", "            OPJ_UINT8 has_color = 0U;\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "                has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    for (i = 0; i < 4U; i++) {\n", "        cmptparm[i].prec = 8;\n", "        cmptparm[i].bpp  = 8;\n", "        cmptparm[i].sgnd = 0;\n", "        cmptparm[i].dx   = (OPJ_UINT32)parameters->subsampling_dx;\n", "        cmptparm[i].dy   = (OPJ_UINT32)parameters->subsampling_dy;\n", "        cmptparm[i].w    = Info_h.biWidth;\n", "        cmptparm[i].h    = Info_h.biHeight;\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[4]; /*Var4  Var5 4STRUCT4 */\nSTRUCT5  Var6[256],Var7[256],Var8[256]; \nSTRUCT5 const *Var9[3]; \nSTRUCT1 *Var10=NULL ; \nSTRUCT6 *Var11; \nSTRUCT7  Var12; \nSTRUCT8  Var13; \nSTRUCT9  Var14,Var15,Var16=Var17; \nSTRUCT10  Var18=Var19; \nSTRUCT5 *Var20=NULL ; \nSTRUCT9  Var21; \nVar9[0]=Var6; \nVar11=fopen(Var1,STRING); \nif (!Var11){\nif (!FUNC2(Var11,&Var12)){\nfclose(Var11); \nif (!FUNC3(Var11,&Var13)){\nfclose(Var11); \nif (Var13.memberVar1 <=  Var22){\nmemset(&Var6[0],0,sizeof (Var6)); \nif (Var15>Var23){\nSTRUCT5  Var24=Var23; \nfor (Var14=Var23; Var14<Var15; Var14  Var25){\nVar8[Var14]=(STRUCT5) getc(Var11); \nVar7[Var14]=(STRUCT5) getc(Var11); \nVar6[Var14]=(STRUCT5) getc(Var11); \n(void ) getc(Var11); /*STRUCT11 */\nVar24 FUNC4(Var8[Var14]Var7[Var14])|(Var7[Var14]Var6[Var14]); \nif (Var13.memberVar2 == 0||Var13.memberVar3 == 0){\nfclose(Var11); \nif (Var13.memberVar1>(((STRUCT9)-1)-31)/Var13.memberVar2){\nfclose(Var11); \nif (Var13.memberVar1 == 4&&\nVar13.memberVar4 == 2){/*Var26 4gets Var27  Var28 8 Var29  Var30 for  Var31...*/\nif (8>(((STRUCT9)-1)-31)/Var13.memberVar2){\nfclose(Var11); \nif (Var21>((STRUCT9)-1)/sizeof (STRUCT5)/Var13.memberVar3){\nfclose(Var11); \nif (Var20 == NULL ){\nfclose(Var11); \nFUNC5(Var11,0,Var32); \nFUNC5(Var11,(long ) Var12.memberVar1,Var32); \nswitch (Var13.memberVar4){\nVar18=FUNC6(Var11,Var20,Var21,Var13.memberVar2,\nVar13.memberVar3); \nVar18=FUNC7(Var11,Var20,Var21,Var13.memberVar2,\nVar13.memberVar3); \nVar18=FUNC8(Var11,Var20,Var21,Var13.memberVar2,\nVar13.memberVar3); \nif (!Var18){\nfclose(Var11); \nfor (Var14=0; Var14<Var33; Var14  Var25){\nVar3[Var14].memberVar1=8; \nVar3[Var14].memberVar2=8; \nVar3[Var14].memberVar3=0; \nVar3[Var14].memberVar4=(STRUCT9) Var2->memberVar1; \nVar3[Var14].memberVar5=(STRUCT9) Var2->memberVar2; \nVar3[Var14].memberVar6=Var13.memberVar2; \nVar3[Var14].memberVar7=Var13.memberVar3; \nif (!Var10){\nfclose(Var11); \nfclose(Var11); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 137, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "getc", "line": 728, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 138, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 743, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 139, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 748, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 140, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 756, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 141, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 763, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 142, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "calloc", "line": 766, "label": -3, "slices": ["    opj_image_cmptparm_t cmptparm[4];   /* maximum of 4 components */\n", "    OPJ_UINT8 const* pLUT[3];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biBitCount <= 8U) {\n", "        palette_len = Info_h.biClrUsed;\n", "        if ((palette_len == 0U) && (Info_h.biBitCount <= 8U)) {\n", "            palette_len = (1U << Info_h.biBitCount);\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    stride = ((Info_h.biWidth * Info_h.biBitCount + 31U) / 32U) *\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        stride = ((Info_h.biWidth * 8U + 31U) / 32U) * 4U;\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "    pData = (OPJ_UINT8 *) calloc(1, sizeof(OPJ_UINT8) * stride * Info_h.biHeight);\n", "    if (pData == NULL) {\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        free(pData);\n", "    for (i = 0; i < 4U; i++) {\n", "        cmptparm[i].w    = Info_h.biWidth;\n", "        cmptparm[i].h    = Info_h.biHeight;\n", "    if (!image) {\n", "        free(pData);\n", "    image->x1 = image->x0 + (Info_h.biWidth  - 1U) * (OPJ_UINT32)\n", "    image->y1 = image->y0 + (Info_h.biHeight - 1U) * (OPJ_UINT32)\n", "    if (Info_h.biBitCount == 24 && Info_h.biCompression == 0) { /*RGB */\n", "else\n", "    } else if (Info_h.biBitCount == 8 &&\n               Info_h.biCompression == 0) { /* RGB 8bpp Indexed */\n", "else\n", "    } else if (Info_h.biBitCount == 8 && Info_h.biCompression == 1) { /*RLE8*/\n", "else\n", "    } else if (Info_h.biBitCount == 4 && Info_h.biCompression == 2) { /*RLE4*/\n", "        bmp8toimage(pData, stride, image,\n                    pLUT); /* RLE 4 gets decoded as 8 bits data for now */\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 0) { /* RGBX */\n", "        bmpmask32toimage(pData, stride, image, 0x00FF0000U, 0x0000FF00U, 0x000000FFU,\n                         0x00000000U);\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 3) { /* bitmask */\n", "        if ((Info_h.biRedMask == 0U) && (Info_h.biGreenMask == 0U) &&\n                (Info_h.biBlueMask == 0U)) {\n", "            Info_h.biRedMask   = 0x00FF0000U;\n", "            Info_h.biGreenMask = 0x0000FF00U;\n", "            Info_h.biBlueMask  = 0x000000FFU;\n", "        bmpmask32toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 0) { /* RGBX */\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 3) { /* bitmask */\n", "        if ((Info_h.biRedMask == 0U) && (Info_h.biGreenMask == 0U) &&\n                (Info_h.biBlueMask == 0U)) {\n", "            Info_h.biRedMask   = 0xF800U;\n", "            Info_h.biGreenMask = 0x07E0U;\n", "            Info_h.biBlueMask  = 0x001FU;\n", "        bmpmask16toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "        fprintf(stderr,\n                \"Other system than 24 bits/pixels or 8 bits (no RLE coding) is not yet implemented [%d]\\n\",\n                Info_h.biBitCount);\n", "    free(pData);\n"], "tokenized": "STRUCT1  Var1[4]; /*Var2  Var3 4STRUCT2 */\nSTRUCT3 const *Var4[3]; \nSTRUCT4 *Var5=NULL ; \nSTRUCT5 *Var6; \nSTRUCT6  Var7; \nSTRUCT7  Var8,Var9,Var10=Var11; \nSTRUCT8  Var12=Var13; \nSTRUCT3 *Var14=NULL ; \nSTRUCT7  Var15; \nif (!Var6){\nif (!FUNC1(Var6,&Var16)){\nif (!FUNC2(Var6,&Var7)){\nif (Var7.memberVar1 <=  Var17){\nVar9=Var7.memberVar2; \nif ((Var9 ==  Var18)&&(Var7.memberVar1 <=  Var17)){\nVar9=(Var11<<Var7.memberVar1); \nif (Var7.memberVar3 == 0||Var7.memberVar4 == 0){\nif (Var7.memberVar1>(((STRUCT7)-1)-31)/Var7.memberVar3){\nVar15=((Var7.memberVar3 *Var7.memberVar1+Var19)/Var20)*\nif (Var7.memberVar1 == 4&&\nVar7.memberVar5 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var7.memberVar3){\nVar15=((Var7.memberVar3 *Var17+Var19)/Var20)*Var27; \nif (Var15>((STRUCT7)-1)/sizeof (STRUCT3)/Var7.memberVar4){\nVar14=(STRUCT3 *) calloc(1,sizeof (STRUCT3)*Var15 *Var7.memberVar4); \nif (Var14 == NULL ){\nswitch (Var7.memberVar5){\nVar12=FUNC3(Var6,Var14,Var15,Var7.memberVar3,\nVar7.memberVar4); \nVar12=FUNC4(Var6,Var14,Var15,Var7.memberVar3,\nVar7.memberVar4); \nVar12=FUNC5(Var6,Var14,Var15,Var7.memberVar3,\nVar7.memberVar4); \nif (!Var12){\nfree(Var14); \nfor (Var8=0; Var8<Var27; Var8  Var28){\nVar1[Var8].memberVar1=Var7.memberVar3; \nVar1[Var8].memberVar2=Var7.memberVar4; \nif (!Var5){\nfree(Var14); \nVar5->memberVar1=Var5->memberVar2+(Var7.memberVar3-Var11)*(STRUCT7)\nVar5->memberVar3=Var5->memberVar4+(Var7.memberVar4-Var11)*(STRUCT7)\nif (Var7.memberVar1 == 24&&Var7.memberVar5 == 0){/*STRUCT9 */\nelse \n}else if (Var7.memberVar1 == 8&&\nVar7.memberVar5 == 0){/*STRUCT9  STRUCT10 STRUCT11 */\nelse \n}else if (Var7.memberVar1 == 8&&Var7.memberVar5 == 1){/*STRUCT12 */\nelse \n}else if (Var7.memberVar1 == 4&&Var7.memberVar5 == 2){/*STRUCT13 */\nFUNC6(Var14,Var15,Var5,\nVar4); /*Var21 4gets Var22  Var23 8 Var24  Var25 for Var26 */\nelse \n}else if (Var7.memberVar1 == 32&&Var7.memberVar5 == 0){/*STRUCT14 */\nFUNC7(Var14,Var15,Var5,Var29,Var30,Var31,\nVar32); \nelse \n}else if (Var7.memberVar1 == 32&&Var7.memberVar5 == 3){/*STRUCT15 */\nif ((Var7.memberVar6 ==  Var18)&&(Var7.memberVar7 ==  Var18)&&\n(Var7.memberVar8 ==  Var18)){\nVar7.memberVar6=Var29; \nVar7.memberVar7=Var30; \nVar7.memberVar8=Var31; \nFUNC7(Var14,Var15,Var5,Var7.memberVar6,Var7.memberVar7,\nVar7.memberVar8,Var7.memberVar9); \nelse \n}else if (Var7.memberVar1 == 16&&Var7.memberVar5 == 0){/*STRUCT14 */\nelse \n}else if (Var7.memberVar1 == 16&&Var7.memberVar5 == 3){/*STRUCT15 */\nif ((Var7.memberVar6 ==  Var18)&&(Var7.memberVar7 ==  Var18)&&\n(Var7.memberVar8 ==  Var18)){\nVar7.memberVar6=Var33; \nVar7.memberVar7=Var34; \nVar7.memberVar8=Var35; \nFUNC8(Var14,Var15,Var5,Var7.memberVar6,Var7.memberVar7,\nVar7.memberVar8,Var7.memberVar9); \nfprintf(Var36,\nSTRING,\nVar7.memberVar1); \nfree(Var14); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 143, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 768, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 144, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 793, "label": -3, "slices": ["    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "    if (pData == NULL) {\n", "    switch (Info_h.biCompression) {\n", "        fprintf(stderr, \"Unsupported BMP compression\\n\");\n"], "tokenized": "STRUCT1 *Var1=NULL ; \nSTRUCT2 *Var2; \nSTRUCT3  Var3; \nSTRUCT4 *Var4=NULL ; \nSTRUCT5  Var5; \nif (!Var2){\nif (!FUNC1(Var2,&Var6)){\nif (!FUNC2(Var2,&Var3)){\nif (Var3.memberVar1 == 0||Var3.memberVar2 == 0){\nif (Var3.memberVar3>(((STRUCT5)-1)-31)/Var3.memberVar1){\nif (Var3.memberVar3 == 4&&\nVar3.memberVar4 == 2){/*Var7 4gets Var8  Var9 8 Var10  Var11 for  Var12...*/\nif (8>(((STRUCT5)-1)-31)/Var3.memberVar1){\nif (Var5>((STRUCT5)-1)/sizeof (STRUCT4)/Var3.memberVar2){\nif (Var4 == NULL ){\nswitch (Var3.memberVar4){\nfprintf(Var13,STRING); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 145, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 798, "label": -3, "slices": ["    OPJ_UINT8 const* pLUT[3];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    stride = ((Info_h.biWidth * Info_h.biBitCount + 31U) / 32U) *\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        stride = ((Info_h.biWidth * 8U + 31U) / 32U) * 4U;\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "    pData = (OPJ_UINT8 *) calloc(1, sizeof(OPJ_UINT8) * stride * Info_h.biHeight);\n", "    if (pData == NULL) {\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        free(pData);\n", "    if (!image) {\n", "        free(pData);\n", "    if (Info_h.biBitCount == 24 && Info_h.biCompression == 0) { /*RGB */\n", "else\n", "    } else if (Info_h.biBitCount == 8 &&\n               Info_h.biCompression == 0) { /* RGB 8bpp Indexed */\n", "else\n", "    } else if (Info_h.biBitCount == 8 && Info_h.biCompression == 1) { /*RLE8*/\n", "else\n", "    } else if (Info_h.biBitCount == 4 && Info_h.biCompression == 2) { /*RLE4*/\n", "        bmp8toimage(pData, stride, image,\n                    pLUT); /* RLE 4 gets decoded as 8 bits data for now */\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 0) { /* RGBX */\n", "        bmpmask32toimage(pData, stride, image, 0x00FF0000U, 0x0000FF00U, 0x000000FFU,\n                         0x00000000U);\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 3) { /* bitmask */\n", "        bmpmask32toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 0) { /* RGBX */\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 3) { /* bitmask */\n", "        bmpmask16toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "    free(pData);\n"], "tokenized": "STRUCT1 const *Var1[3]; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3; \nSTRUCT4  Var4; \nSTRUCT5  Var5=Var6; \nSTRUCT1 *Var7=NULL ; \nSTRUCT6  Var8; \nif (!Var3){\nif (!FUNC1(Var3,&Var9)){\nif (!FUNC2(Var3,&Var4)){\nif (Var4.memberVar1 == 0||Var4.memberVar2 == 0){\nif (Var4.memberVar3>(((STRUCT6)-1)-31)/Var4.memberVar1){\nVar8=((Var4.memberVar1 *Var4.memberVar3+Var10)/Var11)*\nif (Var4.memberVar3 == 4&&\nVar4.memberVar4 == 2){/*Var12 4gets Var13  Var14 8 Var15  Var16 for  Var17...*/\nif (8>(((STRUCT6)-1)-31)/Var4.memberVar1){\nVar8=((Var4.memberVar1 *Var18+Var10)/Var11)*Var19; \nif (Var8>((STRUCT6)-1)/sizeof (STRUCT1)/Var4.memberVar2){\nVar7=(STRUCT1 *) calloc(1,sizeof (STRUCT1)*Var8 *Var4.memberVar2); \nif (Var7 == NULL ){\nswitch (Var4.memberVar4){\nVar5=FUNC3(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nVar5=FUNC4(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nVar5=FUNC5(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nif (!Var5){\nfree(Var7); \nif (!Var2){\nfree(Var7); \nif (Var4.memberVar3 == 24&&Var4.memberVar4 == 0){/*STRUCT7 */\nelse \n}else if (Var4.memberVar3 == 8&&\nVar4.memberVar4 == 0){/*STRUCT7  STRUCT8 STRUCT9 */\nelse \n}else if (Var4.memberVar3 == 8&&Var4.memberVar4 == 1){/*STRUCT10 */\nelse \n}else if (Var4.memberVar3 == 4&&Var4.memberVar4 == 2){/*STRUCT11 */\nFUNC6(Var7,Var8,Var2,\nVar1); /*Var12 4gets Var13  Var14 8 Var15  Var16 for Var17 */\nelse \n}else if (Var4.memberVar3 == 32&&Var4.memberVar4 == 0){/*STRUCT12 */\nFUNC7(Var7,Var8,Var2,Var20,Var21,Var22,\nVar23); \nelse \n}else if (Var4.memberVar3 == 32&&Var4.memberVar4 == 3){/*STRUCT13 */\nFUNC7(Var7,Var8,Var2,Var4.memberVar5,Var4.memberVar6,\nVar4.memberVar7,Var4.memberVar8); \nelse \n}else if (Var4.memberVar3 == 16&&Var4.memberVar4 == 0){/*STRUCT12 */\nelse \n}else if (Var4.memberVar3 == 16&&Var4.memberVar4 == 3){/*STRUCT13 */\nFUNC8(Var7,Var8,Var2,Var4.memberVar5,Var4.memberVar6,\nVar4.memberVar7,Var4.memberVar8); \nfree(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 146, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 799, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 147, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 804, "label": -3, "slices": ["    opj_image_cmptparm_t cmptparm[4];   /* maximum of 4 components */\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "    if (pData == NULL) {\n", "    if (!l_result) {\n", "    memset(&cmptparm[0], 0, sizeof(cmptparm));\n", "    for (i = 0; i < 4U; i++) {\n", "        cmptparm[i].prec = 8;\n", "        cmptparm[i].bpp  = 8;\n", "        cmptparm[i].sgnd = 0;\n", "        cmptparm[i].dx   = (OPJ_UINT32)parameters->subsampling_dx;\n", "        cmptparm[i].dy   = (OPJ_UINT32)parameters->subsampling_dy;\n", "        cmptparm[i].w    = Info_h.biWidth;\n", "        cmptparm[i].h    = Info_h.biHeight;\n", "    image = opj_image_create(numcmpts, &cmptparm[0],\n                             (numcmpts == 1U) ? OPJ_CLRSPC_GRAY : OPJ_CLRSPC_SRGB);\n"], "tokenized": "STRUCT1  Var1[4]; /*Var2  Var3 4STRUCT2 */\nSTRUCT3 *Var4=NULL ; \nSTRUCT4 *Var5; \nSTRUCT5  Var6; \nSTRUCT6  Var7,Var8,Var9=Var10; \nSTRUCT7  Var11=Var12; \nSTRUCT8 *Var13=NULL ; \nSTRUCT6  Var14; \nif (!Var5){\nif (!FUNC1(Var5,&Var15)){\nif (!FUNC2(Var5,&Var6)){\nif (Var6.memberVar1 == 0||Var6.memberVar2 == 0){\nif (Var6.memberVar3>(((STRUCT6)-1)-31)/Var6.memberVar1){\nif (Var6.memberVar3 == 4&&\nVar6.memberVar4 == 2){/*Var16 4gets Var17  Var18 8 Var19  Var20 for  Var21...*/\nif (8>(((STRUCT6)-1)-31)/Var6.memberVar1){\nif (Var14>((STRUCT6)-1)/sizeof (STRUCT8)/Var6.memberVar2){\nif (Var13 == NULL ){\nif (!Var11){\nmemset(&Var1[0],0,sizeof (Var1)); \nfor (Var7=0; Var7<Var22; Var7  Var23){\nVar1[Var7].memberVar1=8; \nVar1[Var7].memberVar2=8; \nVar1[Var7].memberVar3=0; \nVar1[Var7].memberVar4=(STRUCT6) Var24->memberVar1; \nVar1[Var7].memberVar5=(STRUCT6) Var24->memberVar2; \nVar1[Var7].memberVar6=Var6.memberVar1; \nVar1[Var7].memberVar7=Var6.memberVar2; \nVar4=FUNC3(Var9,&Var1[0],\n(Var9 ==  Var10) STRUCT9  Var25); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 148, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 818, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 149, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 819, "label": -3, "slices": ["    OPJ_UINT8 const* pLUT[3];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    stride = ((Info_h.biWidth * Info_h.biBitCount + 31U) / 32U) *\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        stride = ((Info_h.biWidth * 8U + 31U) / 32U) * 4U;\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "    pData = (OPJ_UINT8 *) calloc(1, sizeof(OPJ_UINT8) * stride * Info_h.biHeight);\n", "    if (pData == NULL) {\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        free(pData);\n", "    if (!image) {\n", "        free(pData);\n", "    if (Info_h.biBitCount == 24 && Info_h.biCompression == 0) { /*RGB */\n", "else\n", "    } else if (Info_h.biBitCount == 8 &&\n               Info_h.biCompression == 0) { /* RGB 8bpp Indexed */\n", "else\n", "    } else if (Info_h.biBitCount == 8 && Info_h.biCompression == 1) { /*RLE8*/\n", "else\n", "    } else if (Info_h.biBitCount == 4 && Info_h.biCompression == 2) { /*RLE4*/\n", "        bmp8toimage(pData, stride, image,\n                    pLUT); /* RLE 4 gets decoded as 8 bits data for now */\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 0) { /* RGBX */\n", "        bmpmask32toimage(pData, stride, image, 0x00FF0000U, 0x0000FF00U, 0x000000FFU,\n                         0x00000000U);\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 3) { /* bitmask */\n", "        bmpmask32toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 0) { /* RGBX */\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 3) { /* bitmask */\n", "        bmpmask16toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "    free(pData);\n"], "tokenized": "STRUCT1 const *Var1[3]; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3; \nSTRUCT4  Var4; \nSTRUCT5  Var5=Var6; \nSTRUCT1 *Var7=NULL ; \nSTRUCT6  Var8; \nif (!Var3){\nif (!FUNC1(Var3,&Var9)){\nif (!FUNC2(Var3,&Var4)){\nif (Var4.memberVar1 == 0||Var4.memberVar2 == 0){\nif (Var4.memberVar3>(((STRUCT6)-1)-31)/Var4.memberVar1){\nVar8=((Var4.memberVar1 *Var4.memberVar3+Var10)/Var11)*\nif (Var4.memberVar3 == 4&&\nVar4.memberVar4 == 2){/*Var12 4gets Var13  Var14 8 Var15  Var16 for  Var17...*/\nif (8>(((STRUCT6)-1)-31)/Var4.memberVar1){\nVar8=((Var4.memberVar1 *Var18+Var10)/Var11)*Var19; \nif (Var8>((STRUCT6)-1)/sizeof (STRUCT1)/Var4.memberVar2){\nVar7=(STRUCT1 *) calloc(1,sizeof (STRUCT1)*Var8 *Var4.memberVar2); \nif (Var7 == NULL ){\nswitch (Var4.memberVar4){\nVar5=FUNC3(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nVar5=FUNC4(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nVar5=FUNC5(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nif (!Var5){\nfree(Var7); \nif (!Var2){\nfree(Var7); \nif (Var4.memberVar3 == 24&&Var4.memberVar4 == 0){/*STRUCT7 */\nelse \n}else if (Var4.memberVar3 == 8&&\nVar4.memberVar4 == 0){/*STRUCT7  STRUCT8 STRUCT9 */\nelse \n}else if (Var4.memberVar3 == 8&&Var4.memberVar4 == 1){/*STRUCT10 */\nelse \n}else if (Var4.memberVar3 == 4&&Var4.memberVar4 == 2){/*STRUCT11 */\nFUNC6(Var7,Var8,Var2,\nVar1); /*Var12 4gets Var13  Var14 8 Var15  Var16 for Var17 */\nelse \n}else if (Var4.memberVar3 == 32&&Var4.memberVar4 == 0){/*STRUCT12 */\nFUNC7(Var7,Var8,Var2,Var20,Var21,Var22,\nVar23); \nelse \n}else if (Var4.memberVar3 == 32&&Var4.memberVar4 == 3){/*STRUCT13 */\nFUNC7(Var7,Var8,Var2,Var4.memberVar5,Var4.memberVar6,\nVar4.memberVar7,Var4.memberVar8); \nelse \n}else if (Var4.memberVar3 == 16&&Var4.memberVar4 == 0){/*STRUCT12 */\nelse \n}else if (Var4.memberVar3 == 16&&Var4.memberVar4 == 3){/*STRUCT13 */\nFUNC8(Var7,Var8,Var2,Var4.memberVar5,Var4.memberVar6,\nVar4.memberVar7,Var4.memberVar8); \nfree(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 150, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 871, "label": -3, "slices": ["    opj_image_cmptparm_t cmptparm[4];   /* maximum of 4 components */\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biBitCount <= 8U) {\n", "        palette_len = Info_h.biClrUsed;\n", "        if ((palette_len == 0U) && (Info_h.biBitCount <= 8U)) {\n", "            palette_len = (1U << Info_h.biBitCount);\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    stride = ((Info_h.biWidth * Info_h.biBitCount + 31U) / 32U) *\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        stride = ((Info_h.biWidth * 8U + 31U) / 32U) * 4U;\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "    pData = (OPJ_UINT8 *) calloc(1, sizeof(OPJ_UINT8) * stride * Info_h.biHeight);\n", "    if (pData == NULL) {\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "    for (i = 0; i < 4U; i++) {\n", "        cmptparm[i].w    = Info_h.biWidth;\n", "        cmptparm[i].h    = Info_h.biHeight;\n", "    if (!image) {\n", "    image->x1 = image->x0 + (Info_h.biWidth  - 1U) * (OPJ_UINT32)\n", "    image->y1 = image->y0 + (Info_h.biHeight - 1U) * (OPJ_UINT32)\n", "    if (Info_h.biBitCount == 24 && Info_h.biCompression == 0) { /*RGB */\n", "else\n", "    } else if (Info_h.biBitCount == 8 &&\n               Info_h.biCompression == 0) { /* RGB 8bpp Indexed */\n", "else\n", "    } else if (Info_h.biBitCount == 8 && Info_h.biCompression == 1) { /*RLE8*/\n", "else\n", "    } else if (Info_h.biBitCount == 4 && Info_h.biCompression == 2) { /*RLE4*/\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 0) { /* RGBX */\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 3) { /* bitmask */\n", "        if ((Info_h.biRedMask == 0U) && (Info_h.biGreenMask == 0U) &&\n                (Info_h.biBlueMask == 0U)) {\n", "            Info_h.biRedMask   = 0x00FF0000U;\n", "            Info_h.biGreenMask = 0x0000FF00U;\n", "            Info_h.biBlueMask  = 0x000000FFU;\n", "        bmpmask32toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 0) { /* RGBX */\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 3) { /* bitmask */\n", "        if ((Info_h.biRedMask == 0U) && (Info_h.biGreenMask == 0U) &&\n                (Info_h.biBlueMask == 0U)) {\n", "            Info_h.biRedMask   = 0xF800U;\n", "            Info_h.biGreenMask = 0x07E0U;\n", "            Info_h.biBlueMask  = 0x001FU;\n", "        bmpmask16toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "        fprintf(stderr,\n                \"Other system than 24 bits/pixels or 8 bits (no RLE coding) is not yet implemented [%d]\\n\",\n                Info_h.biBitCount);\n"], "tokenized": "STRUCT1  Var1[4]; /*Var2  Var3 4STRUCT2 */\nSTRUCT3 *Var4=NULL ; \nSTRUCT4 *Var5; \nSTRUCT5  Var6; \nSTRUCT6  Var7,Var8,Var9=Var10; \nSTRUCT7  Var11=Var12; \nSTRUCT8 *Var13=NULL ; \nSTRUCT6  Var14; \nif (!Var5){\nif (!FUNC1(Var5,&Var15)){\nif (!FUNC2(Var5,&Var6)){\nif (Var6.memberVar1 <=  Var16){\nVar8=Var6.memberVar2; \nif ((Var8 ==  Var17)&&(Var6.memberVar1 <=  Var16)){\nVar8=(Var10<<Var6.memberVar1); \nif (Var6.memberVar3 == 0||Var6.memberVar4 == 0){\nif (Var6.memberVar1>(((STRUCT6)-1)-31)/Var6.memberVar3){\nVar14=((Var6.memberVar3 *Var6.memberVar1+Var18)/Var19)*\nif (Var6.memberVar1 == 4&&\nVar6.memberVar5 == 2){/*Var20 4gets Var21  Var22 8 Var23  Var24 for  Var25...*/\nif (8>(((STRUCT6)-1)-31)/Var6.memberVar3){\nVar14=((Var6.memberVar3 *Var16+Var18)/Var19)*Var26; \nif (Var14>((STRUCT6)-1)/sizeof (STRUCT8)/Var6.memberVar4){\nVar13=(STRUCT8 *) calloc(1,sizeof (STRUCT8)*Var14 *Var6.memberVar4); \nif (Var13 == NULL ){\nswitch (Var6.memberVar5){\nVar11=FUNC3(Var5,Var13,Var14,Var6.memberVar3,\nVar6.memberVar4); \nVar11=FUNC4(Var5,Var13,Var14,Var6.memberVar3,\nVar6.memberVar4); \nVar11=FUNC5(Var5,Var13,Var14,Var6.memberVar3,\nVar6.memberVar4); \nif (!Var11){\nfor (Var7=0; Var7<Var26; Var7  Var27){\nVar1[Var7].memberVar1=Var6.memberVar3; \nVar1[Var7].memberVar2=Var6.memberVar4; \nif (!Var4){\nVar4->memberVar1=Var4->memberVar2+(Var6.memberVar3-Var10)*(STRUCT6)\nVar4->memberVar3=Var4->memberVar4+(Var6.memberVar4-Var10)*(STRUCT6)\nif (Var6.memberVar1 == 24&&Var6.memberVar5 == 0){/*STRUCT9 */\nelse \n}else if (Var6.memberVar1 == 8&&\nVar6.memberVar5 == 0){/*STRUCT9  STRUCT10 STRUCT11 */\nelse \n}else if (Var6.memberVar1 == 8&&Var6.memberVar5 == 1){/*STRUCT12 */\nelse \n}else if (Var6.memberVar1 == 4&&Var6.memberVar5 == 2){/*STRUCT13 */\nelse \n}else if (Var6.memberVar1 == 32&&Var6.memberVar5 == 0){/*STRUCT14 */\nelse \n}else if (Var6.memberVar1 == 32&&Var6.memberVar5 == 3){/*STRUCT15 */\nif ((Var6.memberVar6 ==  Var17)&&(Var6.memberVar7 ==  Var17)&&\n(Var6.memberVar8 ==  Var17)){\nVar6.memberVar6=Var28; \nVar6.memberVar7=Var29; \nVar6.memberVar8=Var30; \nFUNC6(Var13,Var14,Var4,Var6.memberVar6,Var6.memberVar7,\nVar6.memberVar8,Var6.memberVar9); \nelse \n}else if (Var6.memberVar1 == 16&&Var6.memberVar5 == 0){/*STRUCT14 */\nelse \n}else if (Var6.memberVar1 == 16&&Var6.memberVar5 == 3){/*STRUCT15 */\nif ((Var6.memberVar6 ==  Var17)&&(Var6.memberVar7 ==  Var17)&&\n(Var6.memberVar8 ==  Var17)){\nVar6.memberVar6=Var31; \nVar6.memberVar7=Var32; \nVar6.memberVar8=Var33; \nFUNC7(Var13,Var14,Var4,Var6.memberVar6,Var6.memberVar7,\nVar6.memberVar8,Var6.memberVar9); \nfprintf(Var34,\nSTRING,\nVar6.memberVar1); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 151, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 875, "label": -3, "slices": ["    OPJ_UINT8 const* pLUT[3];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "    stride = ((Info_h.biWidth * Info_h.biBitCount + 31U) / 32U) *\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        stride = ((Info_h.biWidth * 8U + 31U) / 32U) * 4U;\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "    pData = (OPJ_UINT8 *) calloc(1, sizeof(OPJ_UINT8) * stride * Info_h.biHeight);\n", "    if (pData == NULL) {\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        free(pData);\n", "    if (!image) {\n", "        free(pData);\n", "    if (Info_h.biBitCount == 24 && Info_h.biCompression == 0) { /*RGB */\n", "else\n", "    } else if (Info_h.biBitCount == 8 &&\n               Info_h.biCompression == 0) { /* RGB 8bpp Indexed */\n", "else\n", "    } else if (Info_h.biBitCount == 8 && Info_h.biCompression == 1) { /*RLE8*/\n", "else\n", "    } else if (Info_h.biBitCount == 4 && Info_h.biCompression == 2) { /*RLE4*/\n", "        bmp8toimage(pData, stride, image,\n                    pLUT); /* RLE 4 gets decoded as 8 bits data for now */\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 0) { /* RGBX */\n", "        bmpmask32toimage(pData, stride, image, 0x00FF0000U, 0x0000FF00U, 0x000000FFU,\n                         0x00000000U);\n", "else\n", "    } else if (Info_h.biBitCount == 32 && Info_h.biCompression == 3) { /* bitmask */\n", "        bmpmask32toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 0) { /* RGBX */\n", "else\n", "    } else if (Info_h.biBitCount == 16 && Info_h.biCompression == 3) { /* bitmask */\n", "        bmpmask16toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask,\n                         Info_h.biBlueMask, Info_h.biAlphaMask);\n", "    free(pData);\n"], "tokenized": "STRUCT1 const *Var1[3]; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3; \nSTRUCT4  Var4; \nSTRUCT5  Var5=Var6; \nSTRUCT1 *Var7=NULL ; \nSTRUCT6  Var8; \nif (!Var3){\nif (!FUNC1(Var3,&Var9)){\nif (!FUNC2(Var3,&Var4)){\nif (Var4.memberVar1 == 0||Var4.memberVar2 == 0){\nif (Var4.memberVar3>(((STRUCT6)-1)-31)/Var4.memberVar1){\nVar8=((Var4.memberVar1 *Var4.memberVar3+Var10)/Var11)*\nif (Var4.memberVar3 == 4&&\nVar4.memberVar4 == 2){/*Var12 4gets Var13  Var14 8 Var15  Var16 for  Var17...*/\nif (8>(((STRUCT6)-1)-31)/Var4.memberVar1){\nVar8=((Var4.memberVar1 *Var18+Var10)/Var11)*Var19; \nif (Var8>((STRUCT6)-1)/sizeof (STRUCT1)/Var4.memberVar2){\nVar7=(STRUCT1 *) calloc(1,sizeof (STRUCT1)*Var8 *Var4.memberVar2); \nif (Var7 == NULL ){\nswitch (Var4.memberVar4){\nVar5=FUNC3(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nVar5=FUNC4(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nVar5=FUNC5(Var3,Var7,Var8,Var4.memberVar1,\nVar4.memberVar2); \nif (!Var5){\nfree(Var7); \nif (!Var2){\nfree(Var7); \nif (Var4.memberVar3 == 24&&Var4.memberVar4 == 0){/*STRUCT7 */\nelse \n}else if (Var4.memberVar3 == 8&&\nVar4.memberVar4 == 0){/*STRUCT7  STRUCT8 STRUCT9 */\nelse \n}else if (Var4.memberVar3 == 8&&Var4.memberVar4 == 1){/*STRUCT10 */\nelse \n}else if (Var4.memberVar3 == 4&&Var4.memberVar4 == 2){/*STRUCT11 */\nFUNC6(Var7,Var8,Var2,\nVar1); /*Var12 4gets Var13  Var14 8 Var15  Var16 for Var17 */\nelse \n}else if (Var4.memberVar3 == 32&&Var4.memberVar4 == 0){/*STRUCT12 */\nFUNC7(Var7,Var8,Var2,Var20,Var21,Var22,\nVar23); \nelse \n}else if (Var4.memberVar3 == 32&&Var4.memberVar4 == 3){/*STRUCT13 */\nFUNC7(Var7,Var8,Var2,Var4.memberVar5,Var4.memberVar6,\nVar4.memberVar7,Var4.memberVar8); \nelse \n}else if (Var4.memberVar3 == 16&&Var4.memberVar4 == 0){/*STRUCT12 */\nelse \n}else if (Var4.memberVar3 == 16&&Var4.memberVar4 == 3){/*STRUCT13 */\nFUNC8(Var7,Var8,Var2,Var4.memberVar5,Var4.memberVar6,\nVar4.memberVar7,Var4.memberVar8); \nfree(Var7); \n"}, {"FileName": "before.c", "Caller": "bmptoimage", "Source": false, "Sink": false, "idx": 152, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 876, "label": -3, "slices": ["opj_image_t* bmptoimage(const char *filename, opj_cparameters_t *parameters)\n", "    OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];\n", "    opj_image_t * image = NULL;\n", "    FILE *IN;\n", "    OPJ_BITMAPFILEHEADER File_h;\n", "    OPJ_BITMAPINFOHEADER Info_h;\n", "    OPJ_UINT32 i, palette_len, numcmpts = 1U;\n", "    OPJ_BOOL l_result = OPJ_FALSE;\n", "    OPJ_UINT8* pData = NULL;\n", "    OPJ_UINT32 stride;\n", "    IN = fopen(filename, \"rb\");\n", "    if (!IN) {\n", "    if (!bmp_read_file_header(IN, &File_h)) {\n", "        fclose(IN);\n", "    if (!bmp_read_info_header(IN, &Info_h)) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount <= 8U) {\n", "        if (palette_len > 0U) {\n", "            for (i = 0U; i < palette_len; i++) {\n", "                lut_B[i] = (OPJ_UINT8)getc(IN);\n", "                lut_G[i] = (OPJ_UINT8)getc(IN);\n", "                lut_R[i] = (OPJ_UINT8)getc(IN);\n", "                (void)getc(IN); /* padding */\n", "    if (Info_h.biWidth == 0 || Info_h.biHeight == 0) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "        fclose(IN);\n", "    if (Info_h.biBitCount == 4 &&\n            Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */\n", "        if (8 > (((OPJ_UINT32) - 1) - 31) / Info_h.biWidth) {\n", "            fclose(IN);\n", "    if (stride > ((OPJ_UINT32) - 1) / sizeof(OPJ_UINT8) / Info_h.biHeight) {\n", "        fclose(IN);\n", "    if (pData == NULL) {\n", "        fclose(IN);\n", "    fseek(IN, 0, SEEK_SET);\n", "    fseek(IN, (long)File_h.bfOffBits, SEEK_SET);\n", "    switch (Info_h.biCompression) {\n", "        l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth,\n                                     Info_h.biHeight);\n", "        l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "        l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth,\n                                      Info_h.biHeight);\n", "    if (!l_result) {\n", "        fclose(IN);\n", "    if (!image) {\n", "        fclose(IN);\n", "    fclose(IN);\n"], "tokenized": "STRUCT1 *FUNC1(const char *Var1,STRUCT2 *Var2)\nSTRUCT3  Var3[256],Var4[256],Var5[256]; \nSTRUCT1 *Var6=NULL ; \nSTRUCT4 *Var7; \nSTRUCT5  Var8; \nSTRUCT6  Var9; \nSTRUCT7  Var10,Var11,Var12=Var13; \nSTRUCT8  Var14=Var15; \nSTRUCT3 *Var16=NULL ; \nSTRUCT7  Var17; \nVar7=fopen(Var1,STRING); \nif (!Var7){\nif (!FUNC2(Var7,&Var8)){\nfclose(Var7); \nif (!FUNC3(Var7,&Var9)){\nfclose(Var7); \nif (Var9.memberVar1 <=  Var18){\nif (Var11>Var19){\nfor (Var10=Var19; Var10<Var11; Var10  Var20){\nVar5[Var10]=(STRUCT3) getc(Var7); \nVar4[Var10]=(STRUCT3) getc(Var7); \nVar3[Var10]=(STRUCT3) getc(Var7); \n(void ) getc(Var7); /*STRUCT9 */\nif (Var9.memberVar2 == 0||Var9.memberVar3 == 0){\nfclose(Var7); \nif (Var9.memberVar1>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var9.memberVar1 == 4&&\nVar9.memberVar4 == 2){/*Var21 4gets Var22  Var23 8 Var24  Var25 for  Var26...*/\nif (8>(((STRUCT7)-1)-31)/Var9.memberVar2){\nfclose(Var7); \nif (Var17>((STRUCT7)-1)/sizeof (STRUCT3)/Var9.memberVar3){\nfclose(Var7); \nif (Var16 == NULL ){\nfclose(Var7); \nFUNC4(Var7,0,Var27); \nFUNC4(Var7,(long ) Var8.memberVar1,Var27); \nswitch (Var9.memberVar4){\nVar14=FUNC5(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC6(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nVar14=FUNC7(Var7,Var16,Var17,Var9.memberVar2,\nVar9.memberVar3); \nif (!Var14){\nfclose(Var7); \nif (!Var6){\nfclose(Var7); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 153, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 888, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    int adjustR, adjustG, adjustB;\n", "    if (image->comps[0].prec < 8) {\n", "        fprintf(stderr, \"imagetobmp: Unsupported precision: %d\\n\",\n                image->comps[0].prec);\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        if (image->comps[0].prec > 8) {\n", "            adjustR = (int)image->comps[0].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 0 from %d bits to 8 bits\\n\",\n                   image->comps[0].prec);\n", "        if (image->comps[1].prec > 8) {\n", "            adjustG = (int)image->comps[1].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 1 from %d bits to 8 bits\\n\",\n                   image->comps[1].prec);\n", "        if (image->comps[2].prec > 8) {\n", "            adjustB = (int)image->comps[2].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 2 from %d bits to 8 bits\\n\",\n                   image->comps[2].prec);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r, g, b;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);\n", "            g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            g += (image->comps[1].sgnd ? 1 << (image->comps[1].prec - 1) : 0);\n", "            b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            b += (image->comps[2].sgnd ? 1 << (image->comps[2].prec - 1) : 0);\n", "        if (!fdest) {\n", "        if (image->numcomps > 1) {\n", "            fprintf(stderr, \"imagetobmp: only first component of %d is used.\\n\",\n                    image->numcomps);\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        if (image->comps[0].prec > 8) {\n", "            adjustR = (int)image->comps[0].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 0 from %d bits to 8 bits\\n\",\n                   image->comps[0].prec);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nint  Var8,Var9,Var10; \nif (Var1->memberVar1[0].memberVar1<8){\nfprintf(Var11,STRING,\nVar1->memberVar1[0].memberVar1); \nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nif (Var1->memberVar1[0].memberVar1>8){\nVar8=(int ) Var1->memberVar1[0].memberVar1-8; \nFUNC2(STRING,\nVar1->memberVar1[0].memberVar1); \nif (Var1->memberVar1[1].memberVar3>8){\nVar9=(int ) Var1->memberVar1[1].memberVar3-8; \nFUNC2(STRING,\nVar1->memberVar1[1].memberVar3); \nif (Var1->memberVar1[2].memberVar3>8){\nVar10=(int ) Var1->memberVar1[2].memberVar3-8; \nFUNC2(STRING,\nVar1->memberVar1[2].memberVar3); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var12){\nint  Var13,Var14,Var15; \nVar13=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar13 FUNC3(Var1->memberVar1[0].memberVar4 1<<(Var1->memberVar1[0].memberVar1-1) 0); \nVar14=Var1->memberVar1[1].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar14 FUNC3(Var1->memberVar1[1].memberVar4 1<<(Var1->memberVar1[1].memberVar3-1) 0); \nVar15=Var1->memberVar1[2].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar15 FUNC3(Var1->memberVar1[2].memberVar4 1<<(Var1->memberVar1[2].memberVar3-1) 0); \nif (!Var7){\nif (Var1->memberVar2>1){\nfprintf(Var11,STRING,\nVar1->memberVar2); \nmemberVar5=(int ) Var1->memberVar1[0].memberVar5; \nmemberVar6=(int ) Var1->memberVar1[0].memberVar6; \nif (Var1->memberVar1[0].memberVar1>8){\nVar8=(int ) Var1->memberVar1[0].memberVar1-8; \nFUNC2(STRING,\nVar1->memberVar1[0].memberVar1); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var12){\nint  Var13; \nVar13=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar13 FUNC3(Var1->memberVar1[0].memberVar4 1<<(Var1->memberVar1[0].memberVar1-1) 0); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 154, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fopen", "line": 905, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            int r, g, b;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var8,STRING,Var2); \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var9)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var3)&255),\n(Var9)((Var3)>>8)&255,\n(Var9)((Var3)>>16)&255,\n(Var9)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var4)&255),\n(Var9)((Var4)>>8)&255,\n(Var9)((Var4)>>16)&255,\n(Var9)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var9)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var10){\nVar9  Var11,Var12,Var13; \nint  Var14,Var15,Var16; \nfprintf(Var7,STRING,Var13,Var12,Var11); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var17){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var8,STRING,Var2); \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var9)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var9)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var9)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var9)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var3)&255),\n(Var9)((Var3)>>8)&255,\n(Var9)((Var3)>>16)&255,\n(Var9)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var4)&255),\n(Var9)((Var4)>>8)&255,\n(Var9)((Var4)>>16)&255,\n(Var9)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var9)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var9)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var9)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var9)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var10){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var10){\nint  Var14; \nfprintf(Var7,STRING,(Var9) Var14); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var17){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 155, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 907, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nSTRUCT2 *Var3=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar3=fopen(Var2,STRING); \nif (!Var3){\nfprintf(Var4,STRING,Var2); \nelse \nVar3=fopen(Var2,STRING); \nif (!Var3){\nfprintf(Var4,STRING,Var2); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 156, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 914, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 157, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 918, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            int r, g, b;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n", "            int r;\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>8)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>16)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((memberVar5)&255),\n(Var8)((memberVar5)>>8)&255,\n(Var8)((memberVar5)>>16)&255,\n(Var8)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var8)((memberVar6)&255),\n(Var8)((memberVar6)>>8)&255,\n(Var8)((memberVar6)>>16)&255,\n(Var8)((memberVar6)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*memberVar6 *memberVar5+3*memberVar6 *(memberVar5%2))&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>8)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>16)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var9){\nVar8  Var10,Var11,Var12; \nint  Var13,Var14,Var15; \nVar13=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar14=Var1->memberVar1[1].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar15=Var1->memberVar1[2].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=((3*memberVar5)%4)(4-(3*memberVar5)%4) 0; Var6>0; Var6  Var16){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \nint  Var13; \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 158, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 923, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 159, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 925, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 160, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 930, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 161, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 932, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            int r, g, b;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n", "            int r;\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *memberVar5 *3+3*Var4 *(memberVar5%2)+54)&255,\n(Var8)((Var4 *memberVar5 *3+3*Var4 *(memberVar5%2)+54)>>8)&255,\n(Var8)((Var4 *memberVar5 *3+3*Var4 *(memberVar5%2)+54)>>16)&255,\n(Var8)((Var4 *memberVar5 *3+3*Var4 *(memberVar5%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((memberVar5)&255),\n(Var8)((memberVar5)>>8)&255,\n(Var8)((memberVar5)>>16)&255,\n(Var8)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *memberVar5+3*Var4 *(memberVar5%2))&255,\n(Var8)((Var4 *memberVar5 *3+3*Var4 *(memberVar5%2))>>8)&255,\n(Var8)((Var4 *memberVar5 *3+3*Var4 *(memberVar5%2))>>16)&255,\n(Var8)((Var4 *memberVar5 *3+3*Var4 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<memberVar5 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nint  Var13,Var14,Var15; \nVar13=Var1->memberVar1[0].memberVar6[memberVar5 *Var4-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar14=Var1->memberVar1[1].memberVar5[memberVar5 *Var4-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar15=Var1->memberVar1[2].memberVar5[memberVar5 *Var4-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=((3*memberVar5)%4)(4-(3*memberVar5)%4) 0; Var6>0; Var6  Var16){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \nint  Var13; \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 162, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 936, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            int r, g, b;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n", "            int r;\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar4=(int ) Var1->memberVar1[0].memberVar5; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(memberVar5 *Var3 *3+3*memberVar5 *(Var3%2)+54)&255,\n(Var8)((memberVar5 *Var3 *3+3*memberVar5 *(Var3%2)+54)>>8)&255,\n(Var8)((memberVar5 *Var3 *3+3*memberVar5 *(Var3%2)+54)>>16)&255,\n(Var8)((memberVar5 *Var3 *3+3*memberVar5 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((memberVar5)&255),\n(Var8)((memberVar5)>>8)&255,\n(Var8)((memberVar5)>>16)&255,\n(Var8)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*memberVar5 *Var3+3*memberVar5 *(Var3%2))&255,\n(Var8)((memberVar5 *Var3 *3+3*memberVar5 *(Var3%2))>>8)&255,\n(Var8)((memberVar5 *Var3 *3+3*memberVar5 *(Var3%2))>>16)&255,\n(Var8)((memberVar5 *Var3 *3+3*memberVar5 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *memberVar5; Var5  Var9){\nVar8  Var10,Var11,Var12; \nint  Var13,Var14,Var15; \nVar13=Var1->memberVar1[0].memberVar6[Var3 *memberVar5-((Var5)/(Var3)+1)*Var3+(Var5)%(Var3)]; \nVar14=Var1->memberVar1[1].memberVar5[Var3 *memberVar5-((Var5)/(Var3)+1)*Var3+(Var5)%(Var3)]; \nVar15=Var1->memberVar1[2].memberVar5[Var3 *memberVar5-((Var5)/(Var3)+1)*Var3+(Var5)%(Var3)]; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var16){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \nint  Var13; \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 163, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 940, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 164, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 941, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 165, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 942, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 166, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 944, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            int r, g, b;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n", "            int r;\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>8)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>16)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((memberVar5)&255),\n(Var8)((memberVar5)>>8)&255,\n(Var8)((memberVar5)>>16)&255,\n(Var8)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var8)((memberVar6)&255),\n(Var8)((memberVar6)>>8)&255,\n(Var8)((memberVar6)>>16)&255,\n(Var8)((memberVar6)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*memberVar6 *memberVar5+3*memberVar6 *(memberVar5%2))&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>8)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>16)&255,\n(Var8)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var9){\nVar8  Var10,Var11,Var12; \nint  Var13,Var14,Var15; \nVar13=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar14=Var1->memberVar1[1].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar15=Var1->memberVar1[2].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=((3*memberVar5)%4)(4-(3*memberVar5)%4) 0; Var6>0; Var6  Var16){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \nint  Var13; \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 167, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 948, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 168, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 950, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 169, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 952, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 170, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 954, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 171, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1019, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    int adjustR, adjustG, adjustB;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        if (image->comps[0].prec > 8) {\n", "            adjustR = (int)image->comps[0].prec - 8;\n", "else\n", "            adjustR = 0;\n", "        if (image->comps[1].prec > 8) {\n", "            adjustG = (int)image->comps[1].prec - 8;\n", "else\n", "            adjustG = 0;\n", "        if (image->comps[2].prec > 8) {\n", "            adjustB = (int)image->comps[2].prec - 8;\n", "else\n", "            adjustB = 0;\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            int r, g, b;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);\n", "            if (adjustR > 0) {\n", "                r = ((r >> adjustR) + ((r >> (adjustR - 1)) % 2));\n", "            if (r > 255) {\n", "else\n", "            } else if (r < 0) {\n", "                r = 0;\n", "            rc = (OPJ_UINT8)r;\n", "            g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            g += (image->comps[1].sgnd ? 1 << (image->comps[1].prec - 1) : 0);\n", "            if (adjustG > 0) {\n", "                g = ((g >> adjustG) + ((g >> (adjustG - 1)) % 2));\n", "            if (g > 255) {\n", "else\n", "            } else if (g < 0) {\n", "                g = 0;\n", "            gc = (OPJ_UINT8)g;\n", "            b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            b += (image->comps[2].sgnd ? 1 << (image->comps[2].prec - 1) : 0);\n", "            if (adjustB > 0) {\n", "                b = ((b >> adjustB) + ((b >> (adjustB - 1)) % 2));\n", "            if (b > 255) {\n", "else\n", "            } else if (b < 0) {\n", "                b = 0;\n", "            bc = (OPJ_UINT8)b;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n", "            int r;\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nint  Var8,Var9,Var10; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var11)(memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)&255,\n(Var11)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>8)&255,\n(Var11)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>16)&255,\n(Var11)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar5)&255),\n(Var11)((memberVar5)>>8)&255,\n(Var11)((memberVar5)>>16)&255,\n(Var11)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar6)&255),\n(Var11)((memberVar6)>>8)&255,\n(Var11)((memberVar6)>>16)&255,\n(Var11)((memberVar6)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(3*memberVar6 *memberVar5+3*memberVar6 *(memberVar5%2))&255,\n(Var11)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>8)&255,\n(Var11)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>16)&255,\n(Var11)((memberVar6 *memberVar5 *3+3*memberVar6 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nif (Var1->memberVar1[0].memberVar1>8){\nVar8=(int ) Var1->memberVar1[0].memberVar1-8; \nelse \nVar8=0; \nif (Var1->memberVar1[1].memberVar3>8){\nVar9=(int ) Var1->memberVar1[1].memberVar3-8; \nelse \nVar9=0; \nif (Var1->memberVar1[2].memberVar3>8){\nVar10=(int ) Var1->memberVar1[2].memberVar3-8; \nelse \nVar10=0; \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var12){\nVar11  Var13,Var14,Var15; \nint  Var16,Var17,Var18; \nVar16=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar16 FUNC2(Var1->memberVar1[0].memberVar4 1<<(Var1->memberVar1[0].memberVar1-1) 0); \nif (Var8>0){\nVar16=((Var16>>Var8)+((Var16>>(Var8-1))%2)); \nif (Var16>255){\nelse \n}else if (Var16<0){\nVar16=0; \nVar13=(Var11) Var16; \nVar17=Var1->memberVar1[1].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar17 FUNC2(Var1->memberVar1[1].memberVar4 1<<(Var1->memberVar1[1].memberVar3-1) 0); \nif (Var9>0){\nVar17=((Var17>>Var9)+((Var17>>(Var9-1))%2)); \nif (Var17>255){\nelse \n}else if (Var17<0){\nVar17=0; \nVar14=(Var11) Var17; \nVar18=Var1->memberVar1[2].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar18 FUNC2(Var1->memberVar1[2].memberVar4 1<<(Var1->memberVar1[2].memberVar3-1) 0); \nif (Var10>0){\nVar18=((Var18>>Var10)+((Var18>>(Var10-1))%2)); \nif (Var18>255){\nelse \n}else if (Var18<0){\nVar18=0; \nVar15=(Var11) Var18; \nfprintf(Var7,STRING,Var15,Var14,Var13); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=((3*memberVar5)%4)(4-(3*memberVar5)%4) 0; Var6>0; Var6  Var19){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \nint  Var16; \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 172, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1023, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 173, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 1027, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var8)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var3)&255),\n(Var8)((Var3)>>8)&255,\n(Var8)((Var3)>>16)&255,\n(Var8)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var8)((Var4)&255),\n(Var8)((Var4)>>8)&255,\n(Var8)((Var4)>>16)&255,\n(Var8)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var8)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var8)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var9){\nVar8  Var10,Var11,Var12; \nfprintf(Var7,STRING,Var12,Var11,Var10); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 174, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fopen", "line": 1034, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\",\n                (OPJ_UINT8)(h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2) + 54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff, ((54) >> 16) & 0xff,\n                ((54) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(3 * h * w + 3 * h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        for (i = 0; i < w * h; i++) {\n", "            OPJ_UINT8 rc, gc, bc;\n", "            int r, g, b;\n", "            fprintf(fdest, \"%c%c%c\", bc, gc, rc);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var8,STRING,Var2); \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,\n(Var9)(Var4 *Var3 *3+3*Var4 *(Var3%2)+54)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>8)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>16)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2)+54)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54)&255,((54)>>8)&255,((54)>>16)&255,\n((54)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var3)&255),\n(Var9)((Var3)>>8)&255,\n(Var9)((Var3)>>16)&255,\n(Var9)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var4)&255),\n(Var9)((Var4)>>8)&255,\n(Var9)((Var4)>>16)&255,\n(Var9)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(24)&255,((24)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var9)(3*Var4 *Var3+3*Var4 *(Var3%2))&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>8)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>16)&255,\n(Var9)((Var4 *Var3 *3+3*Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var10){\nVar9  Var11,Var12,Var13; \nint  Var14,Var15,Var16; \nfprintf(Var7,STRING,Var13,Var12,Var11); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=((3*Var3)%4)(4-(3*Var3)%4) 0; Var6>0; Var6  Var17){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var8,STRING,Var2); \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var9)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var9)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var9)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var9)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var3)&255),\n(Var9)((Var3)>>8)&255,\n(Var9)((Var3)>>16)&255,\n(Var9)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var9)((Var4)&255),\n(Var9)((Var4)>>8)&255,\n(Var9)((Var4)>>16)&255,\n(Var9)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var9)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var9)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var9)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var9)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var10){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var10){\nint  Var14; \nfprintf(Var7,STRING,(Var9) Var14); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var17){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 175, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1036, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "            fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nSTRUCT2 *Var3=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nVar3=fopen(Var2,STRING); \nif (!Var3){\nfprintf(Var4,STRING,Var2); \nelse \nVar3=fopen(Var2,STRING); \nif (!Var3){\nfprintf(Var4,STRING,Var2); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 176, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1040, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    int adjustR, adjustG, adjustB;\n", "    if (image->comps[0].prec < 8) {\n", "        fprintf(stderr, \"imagetobmp: Unsupported precision: %d\\n\",\n                image->comps[0].prec);\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        if (image->comps[0].prec > 8) {\n", "            adjustR = (int)image->comps[0].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 0 from %d bits to 8 bits\\n\",\n                   image->comps[0].prec);\n", "        if (image->comps[1].prec > 8) {\n", "            adjustG = (int)image->comps[1].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 1 from %d bits to 8 bits\\n\",\n                   image->comps[1].prec);\n", "        if (image->comps[2].prec > 8) {\n", "            adjustB = (int)image->comps[2].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 2 from %d bits to 8 bits\\n\",\n                   image->comps[2].prec);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r, g, b;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);\n", "            g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            g += (image->comps[1].sgnd ? 1 << (image->comps[1].prec - 1) : 0);\n", "            b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            b += (image->comps[2].sgnd ? 1 << (image->comps[2].prec - 1) : 0);\n", "        if (!fdest) {\n", "        if (image->numcomps > 1) {\n", "            fprintf(stderr, \"imagetobmp: only first component of %d is used.\\n\",\n                    image->numcomps);\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        if (image->comps[0].prec > 8) {\n", "            adjustR = (int)image->comps[0].prec - 8;\n", "            printf(\"BMP CONVERSION: Truncating component 0 from %d bits to 8 bits\\n\",\n                   image->comps[0].prec);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nint  Var8,Var9,Var10; \nif (Var1->memberVar1[0].memberVar1<8){\nfprintf(Var11,STRING,\nVar1->memberVar1[0].memberVar1); \nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nif (Var1->memberVar1[0].memberVar1>8){\nVar8=(int ) Var1->memberVar1[0].memberVar1-8; \nFUNC2(STRING,\nVar1->memberVar1[0].memberVar1); \nif (Var1->memberVar1[1].memberVar3>8){\nVar9=(int ) Var1->memberVar1[1].memberVar3-8; \nFUNC2(STRING,\nVar1->memberVar1[1].memberVar3); \nif (Var1->memberVar1[2].memberVar3>8){\nVar10=(int ) Var1->memberVar1[2].memberVar3-8; \nFUNC2(STRING,\nVar1->memberVar1[2].memberVar3); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var12){\nint  Var13,Var14,Var15; \nVar13=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar13 FUNC3(Var1->memberVar1[0].memberVar4 1<<(Var1->memberVar1[0].memberVar1-1) 0); \nVar14=Var1->memberVar1[1].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar14 FUNC3(Var1->memberVar1[1].memberVar4 1<<(Var1->memberVar1[1].memberVar3-1) 0); \nVar15=Var1->memberVar1[2].memberVar5[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar15 FUNC3(Var1->memberVar1[2].memberVar4 1<<(Var1->memberVar1[2].memberVar3-1) 0); \nif (!Var7){\nif (Var1->memberVar2>1){\nfprintf(Var11,STRING,\nVar1->memberVar2); \nmemberVar5=(int ) Var1->memberVar1[0].memberVar5; \nmemberVar6=(int ) Var1->memberVar1[0].memberVar6; \nif (Var1->memberVar1[0].memberVar1>8){\nVar8=(int ) Var1->memberVar1[0].memberVar1-8; \nFUNC2(STRING,\nVar1->memberVar1[0].memberVar1); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var12){\nint  Var13; \nVar13=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar13 FUNC3(Var1->memberVar1[0].memberVar4 1<<(Var1->memberVar1[0].memberVar1-1) 0); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 177, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1046, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 178, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1050, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))&255,\n(Var11)((memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))>>8)&255,\n(Var11)((memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))>>16)&255,\n(Var11)((memberVar6 *memberVar5+54+1024+memberVar5 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar5)&255),\n(Var11)((memberVar5)>>8)&255,\n(Var11)((memberVar5)>>16)&255,\n(Var11)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar6)&255),\n(Var11)((memberVar6)>>8)&255,\n(Var11)((memberVar6)>>16)&255,\n(Var11)((memberVar6)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(memberVar6 *memberVar5+memberVar6 *(memberVar5%2))&255,\n(Var11)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>8)&255,\n(Var11)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>16)&255,\n(Var11)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var12){\nint  Var8; \nVar8=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=(memberVar5%4)(4-memberVar5%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 179, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1054, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 180, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1056, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 181, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1062, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 182, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1064, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *memberVar5+54+1024+Var4 *(memberVar5%2))&255,\n(Var11)((Var4 *memberVar5+54+1024+Var4 *(memberVar5%2))>>8)&255,\n(Var11)((Var4 *memberVar5+54+1024+Var4 *(memberVar5%2))>>16)&255,\n(Var11)((Var4 *memberVar5+54+1024+memberVar5 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar5)&255),\n(Var11)((memberVar5)>>8)&255,\n(Var11)((memberVar5)>>16)&255,\n(Var11)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *memberVar5+Var4 *(memberVar5%2))&255,\n(Var11)((Var4 *memberVar5+Var4 *(memberVar5%2))>>8)&255,\n(Var11)((Var4 *memberVar5+Var4 *(memberVar5%2))>>16)&255,\n(Var11)((Var4 *memberVar5+Var4 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<memberVar5 *Var4; Var5  Var12){\nint  Var8; \nVar8=Var1->memberVar1[0].memberVar6[memberVar5 *Var4-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=(memberVar5%4)(4-memberVar5%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 183, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1068, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar4=(int ) Var1->memberVar1[0].memberVar5; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(memberVar5 *Var3+54+1024+memberVar5 *(Var3%2))&255,\n(Var11)((memberVar5 *Var3+54+1024+memberVar5 *(Var3%2))>>8)&255,\n(Var11)((memberVar5 *Var3+54+1024+memberVar5 *(Var3%2))>>16)&255,\n(Var11)((memberVar5 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar5)&255),\n(Var11)((memberVar5)>>8)&255,\n(Var11)((memberVar5)>>16)&255,\n(Var11)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(memberVar5 *Var3+memberVar5 *(Var3%2))&255,\n(Var11)((memberVar5 *Var3+memberVar5 *(Var3%2))>>8)&255,\n(Var11)((memberVar5 *Var3+memberVar5 *(Var3%2))>>16)&255,\n(Var11)((memberVar5 *Var3+memberVar5 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *memberVar5; Var5  Var12){\nint  Var8; \nVar8=Var1->memberVar1[0].memberVar6[Var3 *memberVar5-((Var5)/(Var3)+1)*Var3+(Var5)%(Var3)]; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 184, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1072, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 185, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1073, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 186, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1074, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 187, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1076, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))&255,\n(Var11)((memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))>>8)&255,\n(Var11)((memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))>>16)&255,\n(Var11)((memberVar6 *memberVar5+54+1024+memberVar5 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar5)&255),\n(Var11)((memberVar5)>>8)&255,\n(Var11)((memberVar5)>>16)&255,\n(Var11)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var11)((memberVar6)&255),\n(Var11)((memberVar6)>>8)&255,\n(Var11)((memberVar6)>>16)&255,\n(Var11)((memberVar6)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(memberVar6 *memberVar5+memberVar6 *(memberVar5%2))&255,\n(Var11)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>8)&255,\n(Var11)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>16)&255,\n(Var11)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var12){\nint  Var8; \nVar8=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=(memberVar5%4)(4-memberVar5%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 188, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1080, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 189, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1082, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 190, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1084, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 191, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1086, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 192, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1098, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 193, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1115, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    int adjustR, adjustG, adjustB;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        w = (int)image->comps[0].w;\n", "        h = (int)image->comps[0].h;\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        if (image->comps[0].prec > 8) {\n", "            adjustR = (int)image->comps[0].prec - 8;\n", "else\n", "            adjustR = 0;\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];\n", "            r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);\n", "            if (adjustR > 0) {\n", "                r = ((r >> adjustR) + ((r >> (adjustR - 1)) % 2));\n", "            if (r > 255) {\n", "else\n", "            } else if (r < 0) {\n", "                r = 0;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nint  Var8,Var9,Var10; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var11,Var12,Var13; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nVar3=(int ) Var1->memberVar1[0].memberVar5; \nVar4=(int ) Var1->memberVar1[0].memberVar6; \nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var14)(memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))&255,\n(Var14)((memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))>>8)&255,\n(Var14)((memberVar6 *memberVar5+54+1024+memberVar6 *(memberVar5%2))>>16)&255,\n(Var14)((memberVar6 *memberVar5+54+1024+memberVar5 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var14)((memberVar5)&255),\n(Var14)((memberVar5)>>8)&255,\n(Var14)((memberVar5)>>16)&255,\n(Var14)((memberVar5)>>24)&255); \nfprintf(Var7,STRING,(Var14)((memberVar6)&255),\n(Var14)((memberVar6)>>8)&255,\n(Var14)((memberVar6)>>16)&255,\n(Var14)((memberVar6)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var14)(memberVar6 *memberVar5+memberVar6 *(memberVar5%2))&255,\n(Var14)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>8)&255,\n(Var14)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>16)&255,\n(Var14)((memberVar6 *memberVar5+memberVar6 *(memberVar5%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nif (Var1->memberVar1[0].memberVar1>8){\nVar8=(int ) Var1->memberVar1[0].memberVar1-8; \nelse \nVar8=0; \nfor (Var5=0; Var5<256; Var5  Var15){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<memberVar5 *memberVar6; Var5  Var15){\nint  Var11; \nVar11=Var1->memberVar1[0].memberVar7[memberVar5 *memberVar6-((Var5)/(memberVar5)+1)*memberVar5+(Var5)%(memberVar5)]; \nVar11 FUNC2(Var1->memberVar1[0].memberVar4 1<<(Var1->memberVar1[0].memberVar1-1) 0); \nif (Var8>0){\nVar11=((Var11>>Var8)+((Var11>>(Var8-1))%2)); \nif (Var11>255){\nelse \n}else if (Var11<0){\nVar11=0; \nfprintf(Var7,STRING,(Var14) Var11); \nif ((Var5+1)%memberVar5 == 0){\nfor (Var6=(memberVar5%4)(4-memberVar5%4) 0; Var6>0; Var6  Var16){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 194, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1119, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}, {"FileName": "before.c", "Caller": "imagetobmp", "Source": false, "Sink": false, "idx": 195, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 1123, "label": -3, "slices": ["int imagetobmp(opj_image_t * image, const char *outfile)\n", "    int w, h;\n", "    int i, pad;\n", "    FILE *fdest = NULL;\n", "    if (image->comps[0].prec < 8) {\n", "    if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx\n            && image->comps[1].dx == image->comps[2].dx\n            && image->comps[0].dy == image->comps[1].dy\n            && image->comps[1].dy == image->comps[2].dy\n            && image->comps[0].prec == image->comps[1].prec\n            && image->comps[1].prec == image->comps[2].prec\n            && image->comps[0].sgnd == image->comps[1].sgnd\n            && image->comps[1].sgnd == image->comps[2].sgnd) {\n", "            int r, g, b;\n", "else\n", "        fdest = fopen(outfile, \"wb\");\n", "        if (!fdest) {\n", "        fprintf(fdest, \"BM\");\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + 54 + 1024 + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,\n                ((54 + 1024) >> 16) & 0xff,\n                ((54 + 1024) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff, ((40) >> 16) & 0xff,\n                ((40) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((w) & 0xff),\n                (OPJ_UINT8)((w) >> 8) & 0xff,\n                (OPJ_UINT8)((w) >> 16) & 0xff,\n                (OPJ_UINT8)((w) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)((h) & 0xff),\n                (OPJ_UINT8)((h) >> 8) & 0xff,\n                (OPJ_UINT8)((h) >> 16) & 0xff,\n                (OPJ_UINT8)((h) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff,\n                ((0) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8)(h * w + h * (w % 2)) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 8) &  0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 16) & 0xff,\n                (OPJ_UINT8)((h * w + h * (w % 2)) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\n                ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff,\n                ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);\n", "        for (i = 0; i < 256; i++) {\n", "            fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);\n", "        for (i = 0; i < w * h; i++) {\n", "            int r;\n", "            fprintf(fdest, \"%c\", (OPJ_UINT8)r);\n", "            if ((i + 1) % w == 0) {\n", "                for (pad = (w % 4) ? (4 - w % 4) : 0; pad > 0; pad--) { /* ADD */\n", "                    fprintf(fdest, \"%c\", 0);\n", "        fclose(fdest);\n"], "tokenized": "int FUNC1(STRUCT1 *Var1,const char *Var2)\nint  Var3,Var4; \nint  Var5,Var6; \nSTRUCT2 *Var7=NULL ; \nif (Var1->memberVar1[0].memberVar1<8){\nif (Var1->memberVar2 >= 3&&Var1->memberVar1[0].memberVar2 ==  Var1->memberVar1[1].memberVar1\n&&Var1->memberVar1[1].memberVar1 ==  Var1->memberVar1[2].memberVar1\n&&Var1->memberVar1[0].memberVar3 ==  Var1->memberVar1[1].memberVar2\n&&Var1->memberVar1[1].memberVar2 ==  Var1->memberVar1[2].memberVar2\n&&Var1->memberVar1[0].memberVar1 ==  Var1->memberVar1[1].memberVar3\n&&Var1->memberVar1[1].memberVar3 ==  Var1->memberVar1[2].memberVar3\n&&Var1->memberVar1[0].memberVar4 ==  Var1->memberVar1[1].memberVar4\n&&Var1->memberVar1[1].memberVar4 ==  Var1->memberVar1[2].memberVar4){\nint  Var8,Var9,Var10; \nelse \nVar7=fopen(Var2,STRING); \nif (!Var7){\nfprintf(Var7,STRING); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+54+1024+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+54+1024+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+54+1024+Var3 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(54+1024)&255,((54+1024)>>8)&255,\n((54+1024)>>16)&255,\n((54+1024)>>24)&255); \nfprintf(Var7,STRING,(40)&255,((40)>>8)&255,((40)>>16)&255,\n((40)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var3)&255),\n(Var11)((Var3)>>8)&255,\n(Var11)((Var3)>>16)&255,\n(Var11)((Var3)>>24)&255); \nfprintf(Var7,STRING,(Var11)((Var4)&255),\n(Var11)((Var4)>>8)&255,\n(Var11)((Var4)>>16)&255,\n(Var11)((Var4)>>24)&255); \nfprintf(Var7,STRING,(1)&255,((1)>>8)&255); \nfprintf(Var7,STRING,(8)&255,((8)>>8)&255); \nfprintf(Var7,STRING,(0)&255,((0)>>8)&255,((0)>>16)&255,\n((0)>>24)&255); \nfprintf(Var7,STRING,(Var11)(Var4 *Var3+Var4 *(Var3%2))&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>8)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>16)&255,\n(Var11)((Var4 *Var3+Var4 *(Var3%2))>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(7834)&255,((7834)>>8)&255,\n((7834)>>16)&255,((7834)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfprintf(Var7,STRING,(256)&255,((256)>>8)&255,\n((256)>>16)&255,((256)>>24)&255); \nfor (Var5=0; Var5<256; Var5  Var12){\nfprintf(Var7,STRING,Var5,Var5,Var5,0); \nfor (Var5=0; Var5<Var3 *Var4; Var5  Var12){\nint  Var8; \nfprintf(Var7,STRING,(Var11) Var8); \nif ((Var5+1)%Var3 == 0){\nfor (Var6=(Var3%4)(4-Var3%4) 0; Var6>0; Var6  Var13){/*STRUCT3 */\nfprintf(Var7,STRING,0); \nfclose(Var7); \n"}]